{
    "project": {},
    "files": {
        "assets/www/Classes/cypenzyme.js": {
            "name": "assets/www/Classes/cypenzyme.js",
            "modules": {},
            "classes": {
                "cypEnzyme": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets/www/Classes/drug.js": {
            "name": "assets/www/Classes/drug.js",
            "modules": {},
            "classes": {
                "drugObject": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets/www/Classes/interaction.js": {
            "name": "assets/www/Classes/interaction.js",
            "modules": {},
            "classes": {
                "interactionObject": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets/www/Classes/oncologyuse.js": {
            "name": "assets/www/Classes/oncologyuse.js",
            "modules": {},
            "classes": {
                "oncologyUseObject": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets/www/Classes/sideeffect.js": {
            "name": "assets/www/Classes/sideeffect.js",
            "modules": {},
            "classes": {
                "sideEffectObject": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets/www/Classes/specialpopulation.js": {
            "name": "assets/www/Classes/specialpopulation.js",
            "modules": {},
            "classes": {
                "specialPopulationObject": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets/www/js/cyppage.js": {
            "name": "assets/www/js/cyppage.js",
            "modules": {},
            "classes": {
                "cyppage": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets/www/js/doses.js": {
            "name": "assets/www/js/doses.js",
            "modules": {},
            "classes": {
                "doses": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets/www/js/drug.js": {
            "name": "assets/www/js/drug.js",
            "modules": {},
            "classes": {
                "drug": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets/www/js/drugmenu.js": {
            "name": "assets/www/js/drugmenu.js",
            "modules": {},
            "classes": {
                "drugmenu": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets/www/js/fileStorage.js": {
            "name": "assets/www/js/fileStorage.js",
            "modules": {},
            "classes": {
                "fileStorage": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets/www/js/init.js": {
            "name": "assets/www/js/init.js",
            "modules": {},
            "classes": {
                "app": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets/www/js/interaction.js": {
            "name": "assets/www/js/interaction.js",
            "modules": {},
            "classes": {
                "interaction": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets/www/js/remoteServer.js": {
            "name": "assets/www/js/remoteServer.js",
            "modules": {},
            "classes": {
                "remoteServer": 1,
                "remoteServerHandler": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets/www/js/util.js": {
            "name": "assets/www/js/util.js",
            "modules": {},
            "classes": {
                "util": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "assets/www/cordova-2.3.0.js": {
            "name": "assets/www/cordova-2.3.0.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "cypEnzyme": {
            "name": "cypEnzyme",
            "shortname": "cypEnzyme",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "assets/www/Classes/cypenzyme.js",
            "line": 1,
            "description": "Cyp Enzyme object"
        },
        "drugObject": {
            "name": "drugObject",
            "shortname": "drugObject",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "assets/www/Classes/drug.js",
            "line": 1,
            "description": "Object for the individual drugs"
        },
        "interactionObject": {
            "name": "interactionObject",
            "shortname": "interactionObject",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "assets/www/Classes/interaction.js",
            "line": 1,
            "description": "Interaction object which contains information of various drug-drug interactions"
        },
        "oncologyUseObject": {
            "name": "oncologyUseObject",
            "shortname": "oncologyUseObject",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "assets/www/Classes/oncologyuse.js",
            "line": 1,
            "description": "Object which contains the oncology use information of the drug"
        },
        "sideEffectObject": {
            "name": "sideEffectObject",
            "shortname": "sideEffectObject",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "assets/www/Classes/sideeffect.js",
            "line": 1,
            "description": "Object to contain information of the different side effects of the drug"
        },
        "specialPopulationObject": {
            "name": "specialPopulationObject",
            "shortname": "specialPopulationObject",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "assets/www/Classes/specialpopulation.js",
            "line": 1,
            "description": "Object to contain information of the different special populations of the drug"
        },
        "cyppage": {
            "name": "cyppage",
            "shortname": "cyppage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "assets/www/js/cyppage.js",
            "line": 1,
            "description": "Contains helper functions for cyppage.html to display the drug interaction information\nto the user"
        },
        "doses": {
            "name": "doses",
            "shortname": "doses",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "assets/www/js/doses.js",
            "line": 1,
            "description": "Contains helper functions to be used to populate the list of dose adjustments for the user"
        },
        "drug": {
            "name": "drug",
            "shortname": "drug",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "assets/www/js/drug.js",
            "line": 1,
            "description": "Contains helper functions used to display the relevant drug information to the user"
        },
        "drugmenu": {
            "name": "drugmenu",
            "shortname": "drugmenu",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "assets/www/js/drugmenu.js",
            "line": 1,
            "description": "Contains helper functions used by drugmenu.html to populate the list of drugs\nto display to the user."
        },
        "fileStorage": {
            "name": "fileStorage",
            "shortname": "fileStorage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "assets/www/js/fileStorage.js",
            "line": 1,
            "description": "The fileStorage module contains functions to interact with the persistent storage\nfile system on the device in order to save medical information permanently to\nallow for offline use.\n\nThe fileStorage module utilizes the FileStorage API provided by PhoneGap to save the \ndose charts to the phone's persistent storage."
        },
        "app": {
            "name": "app",
            "shortname": "app",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "assets/www/js/init.js",
            "line": 1,
            "description": "This follows the proper initialization process defined at PhoneGap's\nofficial website documentation"
        },
        "interaction": {
            "name": "interaction",
            "shortname": "interaction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "assets/www/js/interaction.js",
            "line": 1,
            "description": "Contains helper functions for the interactions page to display the \nlist of drug-drug interactions"
        },
        "remoteServer": {
            "name": "remoteServer",
            "shortname": "remoteServer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "assets/www/js/remoteServer.js",
            "line": 1,
            "description": "The remoteServer module provides an interface for the phone to\naccess the remote amazon server where the medical data is hosted.\nThe module can be used to check the connection to the server, check if\nthere are valid medical updates, and download those updates"
        },
        "remoteServerHandler": {
            "name": "remoteServerHandler",
            "shortname": "remoteServerHandler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "assets/www/js/remoteServer.js",
            "line": 98,
            "description": "remoteServerHandler class which handles the direct interaction with the server.\nThe communication is done via jQuery's .ajax calls"
        },
        "util": {
            "name": "util",
            "shortname": "util",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "assets/www/js/util.js",
            "line": 1,
            "description": "Provides utility functions to be used throughout the application, \nincluding sorting and object length helper functions"
        }
    },
    "classitems": [
        {
            "file": "assets/www/Classes/cypenzyme.js",
            "line": 7,
            "description": "Constructor method for cyp enzyme object",
            "itemtype": "method",
            "name": "cypEnzyme",
            "params": [
                {
                    "name": "Name",
                    "description": "of the enzyme",
                    "type": "String"
                }
            ],
            "class": "cypEnzyme"
        },
        {
            "file": "assets/www/Classes/cypenzyme.js",
            "line": 21,
            "description": "Returns the name of the cypEnzyme object",
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "Name of the object",
                "type": "String"
            },
            "class": "cypEnzyme"
        },
        {
            "file": "assets/www/Classes/drug.js",
            "line": 33,
            "description": "Constructor for the drug object",
            "itemtype": "method",
            "name": "Drug",
            "return": {
                "description": "Returned drug object",
                "type": "Object"
            },
            "class": "drugObject"
        },
        {
            "file": "assets/www/Classes/drug.js",
            "line": 96,
            "description": "Returns drugs commercial name",
            "itemtype": "method",
            "name": "getTradeName",
            "return": {
                "description": "Trade name of the drug",
                "type": "String"
            },
            "class": "drugObject"
        },
        {
            "file": "assets/www/Classes/drug.js",
            "line": 106,
            "description": "Return drugs risk level",
            "itemtype": "method",
            "name": "getRisk",
            "return": {
                "description": "Risk level of the drug",
                "type": "String"
            },
            "class": "drugObject"
        },
        {
            "file": "assets/www/Classes/drug.js",
            "line": 116,
            "description": "Return generic name of the drug",
            "itemtype": "method",
            "name": "getGenName",
            "return": {
                "description": "Generic name of the drug",
                "type": "String"
            },
            "class": "drugObject"
        },
        {
            "file": "assets/www/Classes/drug.js",
            "line": 126,
            "description": "Returns classification of the drug",
            "itemtype": "method",
            "name": "getClassification",
            "return": {
                "description": "Drug's classification",
                "type": "String"
            },
            "class": "drugObject"
        },
        {
            "file": "assets/www/Classes/drug.js",
            "line": 136,
            "description": "Returns last revision of the drug",
            "itemtype": "method",
            "name": "getLastRevision",
            "return": {
                "description": "Drug's last revision",
                "type": "String"
            },
            "class": "drugObject"
        },
        {
            "file": "assets/www/Classes/drug.js",
            "line": 146,
            "description": "Returns monitoring info of the drug",
            "itemtype": "method",
            "name": "getMonitoring",
            "return": {
                "description": "Drug's monitoring info",
                "type": "String"
            },
            "class": "drugObject"
        },
        {
            "file": "assets/www/Classes/drug.js",
            "line": 156,
            "description": "Returns administration info of the drug",
            "itemtype": "method",
            "name": "getAdmin",
            "return": {
                "description": "Drug's administration information",
                "type": "String"
            },
            "class": "drugObject"
        },
        {
            "file": "assets/www/Classes/drug.js",
            "line": 166,
            "description": "Returns pregnancy info of the drug",
            "itemtype": "method",
            "name": "getPreg",
            "return": {
                "description": "Drug's pregnancy info",
                "type": "String"
            },
            "class": "drugObject"
        },
        {
            "file": "assets/www/Classes/drug.js",
            "line": 176,
            "description": "Returns breast feeding info of the drug",
            "itemtype": "method",
            "name": "getBreastFeed",
            "return": {
                "description": "Drug's breastfeeding info",
                "type": "String"
            },
            "class": "drugObject"
        },
        {
            "file": "assets/www/Classes/drug.js",
            "line": 186,
            "description": "Returns fertility info of the drug",
            "itemtype": "method",
            "name": "getFertility",
            "return": {
                "description": "Drug's fertility information",
                "type": "String"
            },
            "class": "drugObject"
        },
        {
            "file": "assets/www/Classes/drug.js",
            "line": 196,
            "description": "Returns metabolism info of the drug",
            "itemtype": "method",
            "name": "getMetabolism",
            "return": {
                "description": "Drug's metabolism info",
                "type": "String"
            },
            "class": "drugObject"
        },
        {
            "file": "assets/www/Classes/drug.js",
            "line": 206,
            "description": "Returns usual oral dose info of the drug",
            "itemtype": "method",
            "name": "getUsualOralDose",
            "return": {
                "description": "Drug's usual oral dose info",
                "type": "String"
            },
            "class": "drugObject"
        },
        {
            "file": "assets/www/Classes/drug.js",
            "line": 216,
            "description": "Returns availability info of the drug",
            "itemtype": "method",
            "name": "getAvailable",
            "return": {
                "description": "Drug's availability info",
                "type": "String"
            },
            "class": "drugObject"
        },
        {
            "file": "assets/www/Classes/drug.js",
            "line": 226,
            "description": "Returns excretion info of the drug",
            "itemtype": "method",
            "name": "getExcretion",
            "return": {
                "description": "Drug's excretion info",
                "type": "String"
            },
            "class": "drugObject"
        },
        {
            "file": "assets/www/Classes/drug.js",
            "line": 236,
            "description": "Returns contraindication info of the drug",
            "itemtype": "method",
            "name": "getContrain",
            "return": {
                "description": "Drug's contraindication info",
                "type": "String"
            },
            "class": "drugObject"
        },
        {
            "file": "assets/www/Classes/drug.js",
            "line": 246,
            "description": "Returns special population info of the drug",
            "itemtype": "method",
            "name": "getSpecialPop",
            "return": {
                "description": "Drug's special population info",
                "type": "String"
            },
            "class": "drugObject"
        },
        {
            "file": "assets/www/Classes/drug.js",
            "line": 256,
            "description": "Returns oncology use info of the drug",
            "itemtype": "method",
            "name": "getOncologyUse",
            "return": {
                "description": "Drug's oncology use info",
                "type": "String"
            },
            "class": "drugObject"
        },
        {
            "file": "assets/www/Classes/drug.js",
            "line": 266,
            "description": "Returns side effect info of the drug",
            "itemtype": "method",
            "name": "getSideEffects",
            "return": {
                "description": "Drug's side effect info",
                "type": "String"
            },
            "class": "drugObject"
        },
        {
            "file": "assets/www/Classes/drug.js",
            "line": 276,
            "description": "Returns dose adjust info of the drug",
            "itemtype": "method",
            "name": "getDoseAdjust",
            "return": {
                "description": "Drug's dose adjust info",
                "type": "String"
            },
            "class": "drugObject"
        },
        {
            "file": "assets/www/Classes/drug.js",
            "line": 286,
            "description": "Returns interactions info of the drug",
            "itemtype": "method",
            "name": "getInteract",
            "return": {
                "description": "Drug's interaction info",
                "type": "String"
            },
            "class": "drugObject"
        },
        {
            "file": "assets/www/Classes/drug.js",
            "line": 296,
            "description": "Returns other interactions info of the drug",
            "itemtype": "method",
            "name": "getOtherInteract",
            "return": {
                "description": "Drug's other interactions info",
                "type": "String"
            },
            "class": "drugObject"
        },
        {
            "file": "assets/www/Classes/drug.js",
            "line": 306,
            "description": "Returns qt prolonging info of the drug",
            "itemtype": "method",
            "name": "getQtProlonging",
            "return": {
                "description": "Drug's qt prolonging info",
                "type": "String"
            },
            "class": "drugObject"
        },
        {
            "file": "assets/www/Classes/drug.js",
            "line": 316,
            "description": "Returns anti-neoplastic info of the drug",
            "itemtype": "method",
            "name": "getNeo",
            "return": {
                "description": "Drug's anti-neoplastic info",
                "type": "String"
            },
            "class": "drugObject"
        },
        {
            "file": "assets/www/Classes/drug.js",
            "line": 326,
            "description": "Returns frequency info of the drug",
            "itemtype": "method",
            "name": "getFreq",
            "return": {
                "description": "Drug's frequecy info",
                "type": "String"
            },
            "class": "drugObject"
        },
        {
            "file": "assets/www/Classes/interaction.js",
            "line": 7,
            "description": "Constructor function to create interaction object",
            "itemtype": "method",
            "name": "Interaction",
            "params": [
                {
                    "name": "Name",
                    "description": "of substrate",
                    "type": "String"
                },
                {
                    "name": "Name",
                    "description": "of cyp enzyme",
                    "type": "String"
                },
                {
                    "name": "Severity",
                    "description": "of interaction",
                    "type": "String"
                },
                {
                    "name": "Type",
                    "description": "of interaction",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Created interaction object",
                "type": "Object"
            },
            "class": "interactionObject"
        },
        {
            "file": "assets/www/Classes/interaction.js",
            "line": 31,
            "description": "Returns the substrate name of the interaction",
            "itemtype": "method",
            "name": "getSubName",
            "return": {
                "description": "Name of the substrate",
                "type": "String"
            },
            "class": "interactionObject"
        },
        {
            "file": "assets/www/Classes/interaction.js",
            "line": 41,
            "description": "Returns the cyp enzyme name of the interaction",
            "itemtype": "method",
            "name": "getCyp",
            "return": {
                "description": "Name of the cyp enzyme",
                "type": "String"
            },
            "class": "interactionObject"
        },
        {
            "file": "assets/www/Classes/interaction.js",
            "line": 51,
            "description": "Returns the severity of the interaction",
            "itemtype": "method",
            "name": "getSeverity",
            "return": {
                "description": "Severity of the interaction",
                "type": "String"
            },
            "class": "interactionObject"
        },
        {
            "file": "assets/www/Classes/interaction.js",
            "line": 61,
            "description": "Returns the type of the interaction",
            "itemtype": "method",
            "name": "getType",
            "return": {
                "description": "Type of the interaction",
                "type": "String"
            },
            "class": "interactionObject"
        },
        {
            "file": "assets/www/Classes/oncologyuse.js",
            "line": 7,
            "description": "Constructor function to create oncology use object",
            "itemtype": "method",
            "name": "oncologyUse",
            "params": [
                {
                    "name": "Approval",
                    "description": "of the object",
                    "type": "String"
                },
                {
                    "name": "Type",
                    "description": "of cancer the drug is used for",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Created oncology object",
                "type": "Object"
            },
            "class": "oncologyUseObject"
        },
        {
            "file": "assets/www/Classes/oncologyuse.js",
            "line": 25,
            "description": "Return oncology use's approved value",
            "itemtype": "method",
            "name": "getApproved",
            "return": {
                "description": "Approved level",
                "type": "String"
            },
            "class": "oncologyUseObject"
        },
        {
            "file": "assets/www/Classes/oncologyuse.js",
            "line": 35,
            "description": "Return oncology use's cancer type",
            "itemtype": "method",
            "name": "getCancerType",
            "return": {
                "description": "Cancer type",
                "type": "String"
            },
            "class": "oncologyUseObject"
        },
        {
            "file": "assets/www/Classes/sideeffect.js",
            "line": 7,
            "description": "Constructor function to create side effect object",
            "itemtype": "method",
            "name": "sideEffect",
            "params": [
                {
                    "name": "Name",
                    "description": "of side effect",
                    "type": "String"
                },
                {
                    "name": "Severity",
                    "description": "of side effect",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Created side effect object",
                "type": "Object"
            },
            "class": "sideEffectObject"
        },
        {
            "file": "assets/www/Classes/sideeffect.js",
            "line": 25,
            "description": "Returns the name of the side effect",
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "Name of the side effect",
                "type": "String"
            },
            "class": "sideEffectObject"
        },
        {
            "file": "assets/www/Classes/sideeffect.js",
            "line": 35,
            "description": "Returns the severity of the side effect",
            "itemtype": "method",
            "name": "getSeverity",
            "return": {
                "description": "Severity of the side effect",
                "type": "String"
            },
            "class": "sideEffectObject"
        },
        {
            "file": "assets/www/Classes/specialpopulation.js",
            "line": 7,
            "description": "Constructor function to create side effect object",
            "itemtype": "method",
            "name": "specialPopulation",
            "params": [
                {
                    "name": "Name",
                    "description": "of special population",
                    "type": "String"
                },
                {
                    "name": "Note",
                    "description": "associated with the special population",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Created special population object",
                "type": "Object"
            },
            "class": "specialPopulationObject"
        },
        {
            "file": "assets/www/Classes/specialpopulation.js",
            "line": 26,
            "description": "Returns the name of the special population",
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "Name of the interaction",
                "type": "String"
            },
            "class": "specialPopulationObject"
        },
        {
            "file": "assets/www/Classes/specialpopulation.js",
            "line": 36,
            "description": "Returns the note of the special population",
            "itemtype": "method",
            "name": "getNote",
            "return": {
                "description": "Note of the special population",
                "type": "String"
            },
            "class": "specialPopulationObject"
        },
        {
            "file": "assets/www/js/cyppage.js",
            "line": 8,
            "description": "Returns the user back to the page that they came from after selecting the back button",
            "itemtype": "method",
            "name": "decideBack",
            "class": "cyppage"
        },
        {
            "file": "assets/www/js/cyppage.js",
            "line": 21,
            "description": "Creates interaction array from stored medical data",
            "itemtype": "method",
            "name": "createIntArray",
            "params": [
                {
                    "name": "Name",
                    "description": "of the current enzyme the user selected",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Array of interaction objects pertaining to the selected enzyme",
                "type": "Object"
            },
            "class": "cyppage"
        },
        {
            "file": "assets/www/js/cyppage.js",
            "line": 46,
            "description": "Creates array of cyp enzymes based on the current interaction",
            "itemtype": "method",
            "name": "createCypEnzymeArrays",
            "params": [
                {
                    "name": "List",
                    "description": "of interaction objects",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "List of related cyp enzyme objects",
                "type": "Object"
            },
            "class": "cyppage"
        },
        {
            "file": "assets/www/js/cyppage.js",
            "line": 78,
            "itemtype": "method",
            "name": "populateMenuList",
            "params": [
                {
                    "name": "List",
                    "description": "of cyp enzyme objects to display",
                    "type": "Object"
                }
            ],
            "class": "cyppage"
        },
        {
            "file": "assets/www/js/cyppage.js",
            "line": 107,
            "description": "Returns HTML markup for risk image based on the severity of the cyp enzyme",
            "itemtype": "method",
            "name": "addInteractionImage",
            "params": [
                {
                    "name": "Severity",
                    "description": "of the cyp enzyme",
                    "type": "String"
                }
            ],
            "return": {
                "description": "HTML markup of the correct risk icon",
                "type": "String"
            },
            "class": "cyppage"
        },
        {
            "file": "assets/www/js/doses.js",
            "line": 7,
            "description": "Creates list of dose adjustments from the stored medical data",
            "itemtype": "method",
            "name": "createDoseAdjustmentArray",
            "return": {
                "description": "List of dose adjustment objects",
                "type": "Object"
            },
            "class": "doses"
        },
        {
            "file": "assets/www/js/doses.js",
            "line": 43,
            "description": "Populates the menuList listview with the dose adjustment objects",
            "itemtype": "method",
            "name": "populateDoseList",
            "params": [
                {
                    "name": "List",
                    "description": "of dose adjustment objects",
                    "type": "Object"
                }
            ],
            "class": "doses"
        },
        {
            "file": "assets/www/js/doses.js",
            "line": 80,
            "description": "Simply capitalizes the first letter of each word in the string",
            "itemtype": "method",
            "name": "toTitleCase",
            "params": [
                {
                    "name": "String",
                    "description": "to capitalize",
                    "type": "String"
                }
            ],
            "return": {
                "description": "String after capitalization",
                "type": "String"
            },
            "class": "doses"
        },
        {
            "file": "assets/www/js/doses.js",
            "line": 94,
            "description": "Loads dose chart image in a new page",
            "itemtype": "method",
            "name": "loadDoseChartPage",
            "params": [
                {
                    "name": "Path",
                    "description": "to the file stored on the phone, or the url to the file if on webOS",
                    "type": "String"
                }
            ],
            "class": "doses"
        },
        {
            "file": "assets/www/js/drug.js",
            "line": 7,
            "description": "Before leaving the drug.html page, store the current state of the collapsible headers \ninto the localStorage 'drugState' variable.",
            "itemtype": "method",
            "name": "gatherState",
            "class": "drug"
        },
        {
            "file": "assets/www/js/drug.js",
            "line": 36,
            "description": "Upon 'backing' from a selected link, resume the state of the collapsible headers by \nloading from the 'drugState' variable in localStorage",
            "itemtype": "method",
            "name": "setState",
            "class": "drug"
        },
        {
            "file": "assets/www/js/drug.js",
            "line": 64,
            "description": "Populates the list of interactions for the selected drug",
            "itemtype": "method",
            "name": "createInteractionList",
            "params": [
                {
                    "name": "Interaction",
                    "description": "- The current interaction to populate",
                    "type": "Object"
                },
                {
                    "name": "Cyp",
                    "description": "- The current cyp enzyme to populate",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "List of relevant interactions",
                "type": "String"
            },
            "class": "drug"
        },
        {
            "file": "assets/www/js/drug.js",
            "line": 101,
            "description": "Creates the text markup for the monitoring header",
            "itemtype": "method",
            "name": "createMonitoring",
            "return": {
                "description": "HTML markup for the monitoring category",
                "type": "String"
            },
            "class": "drug"
        },
        {
            "file": "assets/www/js/drug.js",
            "line": 116,
            "description": "Creates the text markup for the oncology use header",
            "itemtype": "method",
            "name": "createOncologyUseData",
            "return": {
                "description": "HTML markup for the oncology use category",
                "type": "String"
            },
            "class": "drug"
        },
        {
            "file": "assets/www/js/drug.js",
            "line": 134,
            "description": "Creates the text markup for the special populations header",
            "itemtype": "method",
            "name": "createSpecPopData",
            "return": {
                "description": "HTML markup for the special populations category",
                "type": "String"
            },
            "class": "drug"
        },
        {
            "file": "assets/www/js/drug.js",
            "line": 148,
            "description": "Creates the text markup for the side effects header",
            "itemtype": "method",
            "name": "createSideEffectData",
            "return": {
                "description": "HTML markup for the side effects category",
                "type": "String"
            },
            "class": "drug"
        },
        {
            "file": "assets/www/js/drug.js",
            "line": 167,
            "description": "Creates the text markup for the interaction header",
            "itemtype": "method",
            "name": "createInteractionData",
            "params": [
                {
                    "name": "Interaction",
                    "description": "object to display",
                    "type": "Object"
                },
                {
                    "name": "Cyp",
                    "description": "enzyme object to display",
                    "type": "Object"
                },
                {
                    "name": "Current",
                    "description": "drug being displayed",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "HTML markup for the interaction category",
                "type": "String"
            },
            "class": "drug"
        },
        {
            "file": "assets/www/js/drug.js",
            "line": 217,
            "description": "Saves the necessary state variables to prepare for a transition to cyppage.html",
            "itemtype": "method",
            "name": "cypHyperLink",
            "params": [
                {
                    "name": "ID",
                    "description": "of the selected cyp enzyme",
                    "type": "Integer"
                },
                {
                    "name": "Type",
                    "description": "of enzyme to transition to inside cyppage.html",
                    "type": "String"
                }
            ],
            "class": "drug"
        },
        {
            "file": "assets/www/js/drug.js",
            "line": 233,
            "description": "Saves the necessary state variables to prepare for a transition to the pgp cyp enzyme page",
            "itemtype": "method",
            "name": "pgpHyperLink",
            "params": [
                {
                    "name": "url",
                    "description": "to transition to",
                    "type": "String"
                }
            ],
            "class": "drug"
        },
        {
            "file": "assets/www/js/drug.js",
            "line": 247,
            "description": "Creates the array to store the dose adjustment objects",
            "itemtype": "method",
            "name": "createDoseAdjustment",
            "return": {
                "description": "List of dose adjustment objects",
                "type": "Object"
            },
            "class": "drug"
        },
        {
            "file": "assets/www/js/drug.js",
            "line": 261,
            "description": "Returns the risk color associated with the selected drug",
            "itemtype": "method",
            "name": "getRiskColor",
            "return": {
                "description": "Color associated with the drug (low = green, moderate = yellow, high = red)",
                "type": "String"
            },
            "class": "drug"
        },
        {
            "file": "assets/www/js/drugmenu.js",
            "line": 8,
            "description": "Sorts the menuList by name",
            "itemtype": "method",
            "name": "sortName",
            "class": "drugmenu"
        },
        {
            "file": "assets/www/js/drugmenu.js",
            "line": 46,
            "description": "Sorts the menuList by risk level",
            "itemtype": "method",
            "name": "sortRisk",
            "class": "drugmenu"
        },
        {
            "file": "assets/www/js/drugmenu.js",
            "line": 86,
            "description": "Loads drugs information page based off index from listview",
            "itemtype": "method",
            "name": "loadDrugPage",
            "params": [
                {
                    "name": "Index",
                    "description": "of the selected drug",
                    "type": "Integer"
                }
            ],
            "class": "drugmenu"
        },
        {
            "file": "assets/www/js/drugmenu.js",
            "line": 100,
            "description": "Populates MenuList(Listview) with drugArray value and based on whether trade/gen is needed",
            "itemtype": "method",
            "name": "populateMenuList",
            "params": [
                {
                    "name": "drugArray",
                    "description": "- List of drug objects",
                    "type": "Object"
                },
                {
                    "name": "isTradeName",
                    "description": "- If true, populate via trade name.  If false, populate via generic name",
                    "type": "Boolean"
                }
            ],
            "class": "drugmenu"
        },
        {
            "file": "assets/www/js/drugmenu.js",
            "line": 132,
            "description": "Creates DrugArray from JSON data",
            "itemtype": "method",
            "name": "createDrugArray",
            "return": {
                "description": "List of drug objects created from the medical data",
                "type": "Object"
            },
            "class": "drugmenu"
        },
        {
            "file": "assets/www/js/fileStorage.js",
            "line": 20,
            "description": "Initializes the fileSystem object by using the FileStorage API to request the \nphone's persistent storage.  Also creates the anticData folder on the phone which\nwill be the location of stored doseChart images",
            "itemtype": "method",
            "name": "initializeFileSystem",
            "class": "fileStorage"
        },
        {
            "file": "assets/www/js/fileStorage.js",
            "line": 39,
            "description": "Downloads an image file from the remote server so that it can be stored \nin the anticData folder on the phone's persistent storage for offline use",
            "itemtype": "method",
            "name": "downloadImageFromServer",
            "params": [
                {
                    "name": "Name",
                    "description": "of the image to store",
                    "type": "String"
                }
            ],
            "class": "fileStorage"
        },
        {
            "file": "assets/www/js/fileStorage.js",
            "line": 62,
            "description": "Error handling callback function incase the File API plugin\nreturns an error.  Log the code for debugging purposes.",
            "itemtype": "method",
            "name": "fileError",
            "params": [
                {
                    "name": "Error",
                    "description": "code to display",
                    "type": "String"
                }
            ],
            "class": "fileStorage"
        },
        {
            "file": "assets/www/js/init.js",
            "line": 9,
            "description": "initialize determines the current platform that the application is running on\nand will immediately execute the onDeviceReady if we detect we're running on\nwebOS, otherwise binds the onDeviceReady if we detect we're on a mobile device.\nThis ensures that onDeviceReady gets executed regardless of what platform the \napp is being run on.",
            "itemtype": "method",
            "name": "initialize",
            "class": "app"
        },
        {
            "file": "assets/www/js/init.js",
            "line": 32,
            "description": "onDeviceReady is executed each time the drugmenu.html page is loaded (including the landing\nafter accepting the disclaimer on index.html).  onDeviceRead initializes\nthe application and probes the remote server for medical updates, then populates the most\nup to date list of drugs for the user",
            "itemtype": "method",
            "name": "onDeviceReady",
            "class": "app"
        },
        {
            "file": "assets/www/js/interaction.js",
            "line": 8,
            "description": "Loads the selected interaction page by setting the ID of the selected interaction in \nlocalstorage, and transitioning to cyppage.html",
            "itemtype": "method",
            "name": "loadInteractPage",
            "params": [
                {
                    "name": "The",
                    "description": "ID of the selected interaction to display",
                    "type": "Integer"
                }
            ],
            "class": "interaction"
        },
        {
            "file": "assets/www/js/interaction.js",
            "line": 24,
            "description": "Uses the stored medical data to create the array of cyp enzymes to display to the user",
            "itemtype": "method",
            "name": "createCypArray",
            "return": {
                "description": "List of cyp enzyme objects to display",
                "type": "Object"
            },
            "class": "interaction"
        },
        {
            "file": "assets/www/js/interaction.js",
            "line": 47,
            "description": "Populates the interactions.html menu listview with the enzymes in the created cyp array",
            "itemtype": "method",
            "name": "populateMenuList",
            "params": [
                {
                    "name": "List",
                    "description": "of cyp enzymes to display",
                    "type": "Object"
                }
            ],
            "class": "interaction"
        },
        {
            "file": "assets/www/js/remoteServer.js",
            "line": 10,
            "description": "getLastUpdateTime() returns the stored timestamp of the last time\nthe phone downloaded medical data from the remote server (according \nto the server time).",
            "itemtype": "method",
            "name": "getLastUpdateTime",
            "return": {
                "description": "Timestamp of the last time medical data was downloaded",
                "type": "String"
            },
            "class": "remoteServer"
        },
        {
            "file": "assets/www/js/remoteServer.js",
            "line": 29,
            "description": "Stores the last medical update timestamp onto the phone's localStorage",
            "itemtype": "method",
            "name": "storeLastUpdateTime",
            "params": [
                {
                    "name": "The",
                    "description": "JSON object which contains the last medical update time",
                    "type": "Object"
                }
            ],
            "class": "remoteServer"
        },
        {
            "file": "assets/www/js/remoteServer.js",
            "line": 41,
            "description": "Checks if there is a valid connection to the remote server, and whether or not\nthere are new medical updates to be downloaded.  If yes, downloads the medical\ninformation and dose adjustment charts",
            "itemtype": "method",
            "name": "fetchUpdatesFromServer",
            "class": "remoteServer"
        },
        {
            "file": "assets/www/js/remoteServer.js",
            "line": 110,
            "description": "fetchData uses an async ajax call to download all of the medical updates since\nthe last time a download occurred",
            "itemtype": "method",
            "name": "fetchData",
            "return": {
                "description": "Stringify'd JSON of the medical information",
                "type": "String"
            },
            "class": "remoteServerHandler"
        },
        {
            "file": "assets/www/js/remoteServer.js",
            "line": 141,
            "description": "Uses an ajax call to the AreUpdates server API function to see if there are\nnew updates since the last time the medical data was updated",
            "itemtype": "method",
            "name": "checkForUpdates",
            "return": {
                "description": "Whether or not there are valid updates available for download",
                "type": "Boolean"
            },
            "class": "remoteServerHandler"
        },
        {
            "file": "assets/www/js/remoteServer.js",
            "line": 176,
            "description": "Uses an async ajax call to see if there is a valid connection to the remoteServer \n(i.e. if the device has internet enabled, and the remote server is accessible)",
            "itemtype": "method",
            "name": "isReachable",
            "return": {
                "description": "Returns True if a connection can be established",
                "type": "Boolean"
            },
            "class": "remoteServerHandler"
        },
        {
            "file": "assets/www/js/util.js",
            "line": 8,
            "description": "Sorts the array of objects based on an input parameter of the object",
            "itemtype": "method",
            "name": "sort",
            "params": [
                {
                    "name": "List",
                    "description": "of objects to sort",
                    "type": "Object"
                },
                {
                    "name": "Attribute",
                    "description": "of the object to sort by",
                    "type": "String"
                }
            ],
            "return": {
                "description": "List of objects sorted by the attribute",
                "type": "Object"
            },
            "class": "util"
        },
        {
            "file": "assets/www/js/util.js",
            "line": 30,
            "description": "Sorts the array of objects based on the risk level of the drug",
            "itemtype": "method",
            "name": "riskSort",
            "params": [
                {
                    "name": "List",
                    "description": "of objects to sort",
                    "type": "Object"
                },
                {
                    "name": "Attribute",
                    "description": "of the object to sort by",
                    "type": "String"
                },
                {
                    "name": "Whether",
                    "description": "or not the list should be reversed",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "List of objects sorted by the attribute",
                "type": "Object"
            },
            "class": "util"
        },
        {
            "file": "assets/www/js/util.js",
            "line": 76,
            "description": "Simple quicksort algorithm for sorting an array of objects",
            "itemtype": "method",
            "name": "quicksort",
            "params": [
                {
                    "name": "List",
                    "description": "of objects to sort",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "List of objects quicksorted by the attribute",
                "type": "Object"
            },
            "class": "util"
        },
        {
            "file": "assets/www/js/util.js",
            "line": 101,
            "description": "Returns the length of the list of objects",
            "itemtype": "method",
            "name": "objLength",
            "params": [
                {
                    "name": "List",
                    "description": "of objects",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Length of list of objects",
                "type": "Integer"
            },
            "class": "util"
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 95,
            "description": "Listen for DOMContentLoaded and notify our channel subscribers.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 105,
            "description": "Intercept calls to addEventListener + removeEventListener and handle deviceready,\nresume, and pause events.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 114,
            "description": "Houses custom event handlers to intercept on document + window event listeners.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 180,
            "description": "Methods to add/remove your own addEventListener hijacking on document + window.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 198,
            "description": "Retrieve original event handlers that were replaced by Cordova",
            "return": {
                "description": "object"
            },
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 207,
            "description": "Method to fire event from native code\nbNoDetach is required for events which cause an exception which needs to be caught in native code",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 237,
            "description": "Plugin callback mechanism.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 257,
            "description": "Called by native code when returning successful result from an action.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 268,
            "description": "Called by native code when returning error result from an action.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 281,
            "description": "Called by native code when returning the result from an action.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 453,
            "description": "Merge properties from one object onto another recursively.  Properties from\nthe src object will overwrite existing target property.",
            "params": [
                {
                    "name": "target",
                    "description": "Object to merge properties into."
                },
                {
                    "name": "src",
                    "description": "Object to merge properties from."
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 498,
            "description": "Custom pub-sub \"channel\" that can have functions subscribed to it\nThis object is used to define and control firing of events for\ncordova initialization, as well as for custom events thereafter.\n\nThe order of events during page load and Cordova startup is as follows:\n\nonDOMContentLoaded*         Internal event that is received when the web page is loaded and parsed.\nonNativeReady*              Internal event that indicates the Cordova native side is ready.\nonCordovaReady*             Internal event fired when all Cordova JavaScript objects have been created.\nonCordovaInfoReady*         Internal event fired when device properties are available.\nonCordovaConnectionReady*   Internal event fired when the connection property has been set.\nonDeviceReady*              User event fired to indicate that Cordova is ready\nonResume                    User event fired to indicate a start/resume lifecycle event\nonPause                     User event fired to indicate a pause lifecycle event\nonDestroy*                  Internal event fired when app is being destroyed (User should use window.onunload event, not this one).\n\nThe events marked with an * are sticky. Once they have fired, they will stay in the fired state.\nAll listeners that subscribe after the event is fired will be executed right away.\n\nThe only Cordova events that user code should register for are:\n     deviceready           Cordova native code is initialized and Cordova APIs can be called from JavaScript\n     pause                 App has moved to background\n     resume                App has returned to foreground\n\nListeners can be registered as:\n     document.addEventListener(\"deviceready\", myDeviceReadyListener, false);\n     document.addEventListener(\"resume\", myResumeListener, false);\n     document.addEventListener(\"pause\", myPauseListener, false);\n\nThe DOM lifecycle events should be used for saving and restoring state\n     window.onload\n     window.onunload",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 534,
            "description": "Channel",
            "is_constructor": 1,
            "params": [
                {
                    "name": "type",
                    "description": "String the channel name"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 554,
            "description": "Calls the provided function only after all of the channels specified\nhave been fired. All channels must be sticky channels.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 579,
            "description": "cordova Channels that must fire before \"deviceready\" is fired.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 585,
            "description": "Indicate that a feature needs to be initialized before it is ready to be used.\nThis holds up Cordova's \"deviceready\" event until the feature has been initialized\nand Cordova.initComplete(feature) is called.",
            "params": [
                {
                    "name": "feature",
                    "description": "The unique feature name",
                    "type": "String"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 600,
            "description": "Indicate that initialization code has completed and the feature is ready to be used.",
            "params": [
                {
                    "name": "feature",
                    "description": "The unique feature name",
                    "type": "String"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 617,
            "description": "Subscribes the given function to the channel. Any time that\nChannel.fire is called so too will the function.\nOptionally specify an execution context for the function\nand a guid that can be used to stop subscribing to the channel.\nReturns the guid.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 653,
            "description": "Unsubscribes the function with the given guid from the channel.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 671,
            "description": "Calls all functions subscribed to this channel.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 995,
            "description": "Execute a cordova command.  It is up to the native side whether this action\nis synchronous or asynchronous.  The native side can return:\n     Synchronous: PluginResult object as a JSON string\n     Asynchronous: Empty string \"\"\nIf async, the native side will cordova.callbackSuccess or cordova.callbackError,\ndepending upon the result of the action.",
            "params": [
                {
                    "name": "success",
                    "description": "The success callback",
                    "type": "Function"
                },
                {
                    "name": "fail",
                    "description": "The fail callback",
                    "type": "Function"
                },
                {
                    "name": "service",
                    "description": "The name of the service to use",
                    "type": "String"
                },
                {
                    "name": "action",
                    "description": "Action to be run in cordova",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "Zero or more arguments to pass to the method",
                    "type": "String[]",
                    "optional": true
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 1347,
            "description": "Gets a picture from source defined by \"options.sourceType\", and returns the\nimage as defined by the \"options.destinationType\" option.\n\nThe defaults are sourceType=CAMERA and destinationType=FILE_URI.",
            "params": [
                {
                    "name": "successCallback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "errorCallback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 1495,
            "description": "Encapsulates options for iOS Popover image picker",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 1515,
            "description": "Encapsulates all audio capture operation configuration options.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 1534,
            "description": "The CaptureError interface encapsulates all errors in the Capture API.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 1559,
            "description": "Encapsulates all image capture operation configuration options.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 1576,
            "description": "Encapsulates all video capture operation configuration options.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 1595,
            "description": "CompassError.\nAn error code assigned by an implementation when an error has occurred",
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 1628,
            "description": "Encapsulates a set of parameters that the capture device supports.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 1649,
            "description": "Network status",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 1671,
            "description": "Converts primitives into Complex Object\nCurrently only used for Date fields",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 1685,
            "description": "Converts Complex objects into primitives\nOnly conversion at present is for Dates.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 1709,
            "description": "Contains information about a single contact.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "id",
                    "description": "unique identifier",
                    "type": "DOMString"
                },
                {
                    "name": "displayName",
                    "description": "",
                    "type": "DOMString"
                },
                {
                    "name": "name",
                    "description": "",
                    "type": "ContactName"
                },
                {
                    "name": "nickname",
                    "description": "",
                    "type": "DOMString"
                },
                {
                    "name": "phoneNumbers",
                    "description": "array of phone numbers",
                    "type": "Array.<ContactField>"
                },
                {
                    "name": "emails",
                    "description": "array of email addresses",
                    "type": "Array.<ContactField>"
                },
                {
                    "name": "addresses",
                    "description": "array of addresses",
                    "type": "Array.<ContactAddress>"
                },
                {
                    "name": "ims",
                    "description": "instant messaging user ids",
                    "type": "Array.<ContactField>"
                },
                {
                    "name": "organizations",
                    "description": "",
                    "type": "Array.<ContactOrganization>"
                },
                {
                    "name": "birthday",
                    "description": "contact's birthday",
                    "type": "DOMString"
                },
                {
                    "name": "note",
                    "description": "user notes about contact",
                    "type": "DOMString"
                },
                {
                    "name": "photos",
                    "description": "",
                    "type": "Array.<ContactField>"
                },
                {
                    "name": "categories",
                    "description": "",
                    "type": "Array.<ContactField>"
                },
                {
                    "name": "urls",
                    "description": "contact's web sites",
                    "type": "Array.<ContactField>"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 1746,
            "description": "Removes contact from device storage.",
            "params": [
                {
                    "name": "successCB",
                    "description": "success callback"
                },
                {
                    "name": "errorCB",
                    "description": "error callback"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 1763,
            "description": "Creates a deep copy of this Contact.\nWith the contact ID set to null.",
            "return": {
                "description": "copy of this Contact"
            },
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 1817,
            "description": "Persists contact to device storage.",
            "params": [
                {
                    "name": "successCB",
                    "description": "success callback"
                },
                {
                    "name": "errorCB",
                    "description": "error callback"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 1850,
            "description": "Contact address.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "id",
                    "description": "unique identifier, should only be set by native code",
                    "type": "DOMString"
                },
                {
                    "name": "formatted",
                    "description": "// NOTE: not a W3C standard"
                },
                {
                    "name": "streetAddress",
                    "description": ""
                },
                {
                    "name": "locality",
                    "description": ""
                },
                {
                    "name": "region",
                    "description": ""
                },
                {
                    "name": "postalCode",
                    "description": ""
                },
                {
                    "name": "country",
                    "description": ""
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 1881,
            "description": "ContactError.\nAn error code assigned by an implementation when an error has occurred",
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 1890,
            "description": "Error codes",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 1908,
            "description": "Generic contact field.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "id",
                    "description": "unique identifier, should only be set by native code // NOTE: not a W3C standard",
                    "type": "DOMString"
                },
                {
                    "name": "type",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                },
                {
                    "name": "pref",
                    "description": ""
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 1930,
            "description": "ContactFindOptions.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "filter",
                    "description": "used to match contacts against"
                },
                {
                    "name": "multiple",
                    "description": "boolean used to determine if more than one contact should be returned"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 1949,
            "description": "Contact name.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "formatted",
                    "description": "// NOTE: not part of W3C standard"
                },
                {
                    "name": "familyName",
                    "description": ""
                },
                {
                    "name": "givenName",
                    "description": ""
                },
                {
                    "name": "middle",
                    "description": ""
                },
                {
                    "name": "prefix",
                    "description": ""
                },
                {
                    "name": "suffix",
                    "description": ""
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 1975,
            "description": "Contact organization.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "id",
                    "description": "unique identifier, should only be set by native code // NOTE: not a W3C standard",
                    "type": "DOMString"
                },
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "dept",
                    "description": ""
                },
                {
                    "name": "title",
                    "description": ""
                },
                {
                    "name": "startDate",
                    "description": ""
                },
                {
                    "name": "endDate",
                    "description": ""
                },
                {
                    "name": "location",
                    "description": ""
                },
                {
                    "name": "desc",
                    "description": ""
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 2004,
            "description": "This class contains position information.",
            "params": [
                {
                    "name": "lat",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "lng",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "alt",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "acc",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "head",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "vel",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "altacc",
                    "description": "",
                    "type": "Object"
                }
            ],
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 2016,
            "description": "The latitude of the position.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 2020,
            "description": "The longitude of the position,",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 2024,
            "description": "The accuracy of the position.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 2028,
            "description": "The altitude of the position.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 2032,
            "description": "The direction the device is moving at the position.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 2036,
            "description": "The velocity with which the device is moving at the position.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 2045,
            "description": "The altitude accuracy of the position.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 2064,
            "description": "An interface representing a directory on the file system.\n\n{boolean} isFile always false (readonly)\n{boolean} isDirectory always true (readonly)\n{DOMString} name of the directory, excluding the path leading to it (readonly)\n{DOMString} fullPath the absolute full path to the directory (readonly)\nTODO: implement this!!! {FileSystem} filesystem on which the directory resides (readonly)",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 2079,
            "description": "Creates a new DirectoryReader to read entries from this directory",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 2086,
            "description": "Creates or looks up a directory",
            "params": [
                {
                    "name": "path",
                    "description": "either a relative or absolute path from this directory in which to look up or create a directory",
                    "type": "DOMString"
                },
                {
                    "name": "options",
                    "description": "to create or exclusively create the directory",
                    "type": "Flags"
                },
                {
                    "name": "successCallback",
                    "description": "is called with the new entry",
                    "type": "Function"
                },
                {
                    "name": "errorCallback",
                    "description": "is called with a FileError",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 2105,
            "description": "Deletes a directory and all of it's contents",
            "params": [
                {
                    "name": "successCallback",
                    "description": "is called with no parameters",
                    "type": "Function"
                },
                {
                    "name": "errorCallback",
                    "description": "is called with a FileError",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 2118,
            "description": "Creates or looks up a file",
            "params": [
                {
                    "name": "path",
                    "description": "either a relative or absolute path from this directory in which to look up or create a file",
                    "type": "DOMString"
                },
                {
                    "name": "options",
                    "description": "to create or exclusively create the file",
                    "type": "Flags"
                },
                {
                    "name": "successCallback",
                    "description": "is called with the new entry",
                    "type": "Function"
                },
                {
                    "name": "errorCallback",
                    "description": "is called with a FileError",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 2148,
            "description": "An interface that lists the files and directories in a directory.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 2155,
            "description": "Returns a list of entries from a directory.",
            "params": [
                {
                    "name": "successCallback",
                    "description": "is called with a list of entries",
                    "type": "Function"
                },
                {
                    "name": "errorCallback",
                    "description": "is called with a FileError",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 2197,
            "description": "Represents a file or directory on the local file system.",
            "params": [
                {
                    "name": "isFile!~YUIDOC_LINE~!",
                    "description": "true if Entry is a file (readonly)",
                    "type": "Boolean"
                },
                {
                    "name": "isDirectory!~YUIDOC_LINE~!",
                    "description": "true if Entry is a directory (readonly)",
                    "type": "Boolean"
                },
                {
                    "name": "name!~YUIDOC_LINE~!",
                    "description": "name of the file or directory, excluding the path\n           leading to it (readonly)",
                    "type": "DOMString"
                },
                {
                    "name": "fullPath!~YUIDOC_LINE~!",
                    "description": "the absolute full path to the file or directory\n           (readonly)",
                    "type": "DOMString"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 2219,
            "description": "Look up the metadata of the entry.",
            "params": [
                {
                    "name": "successCallback!~YUIDOC_LINE~!",
                    "description": "is called with a Metadata object",
                    "type": "Function"
                },
                {
                    "name": "errorCallback!~YUIDOC_LINE~!",
                    "description": "is called with a FileError",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 2239,
            "description": "Set the metadata of the entry.",
            "params": [
                {
                    "name": "successCallback!~YUIDOC_LINE~!",
                    "description": "is called with a Metadata object",
                    "type": "Function"
                },
                {
                    "name": "errorCallback!~YUIDOC_LINE~!",
                    "description": "is called with a FileError",
                    "type": "Function"
                },
                {
                    "name": "metadataObject!~YUIDOC_LINE~!",
                    "description": "keys and values to set",
                    "type": "Object"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 2254,
            "description": "Move a file or directory to a new location.",
            "params": [
                {
                    "name": "parent!~YUIDOC_LINE~!",
                    "description": "the directory to which to move this entry",
                    "type": "DirectoryEntry"
                },
                {
                    "name": "newName!~YUIDOC_LINE~!",
                    "description": "new name of the entry, defaults to the current name",
                    "type": "DOMString"
                },
                {
                    "name": "successCallback!~YUIDOC_LINE~!",
                    "description": "called with the new DirectoryEntry object",
                    "type": "Function"
                },
                {
                    "name": "errorCallback!~YUIDOC_LINE~!",
                    "description": "called with a FileError",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 2304,
            "description": "Copy a directory to a different location.",
            "params": [
                {
                    "name": "parent!~YUIDOC_LINE~!",
                    "description": "the directory to which to copy the entry",
                    "type": "DirectoryEntry"
                },
                {
                    "name": "newName!~YUIDOC_LINE~!",
                    "description": "new name of the entry, defaults to the current name",
                    "type": "DOMString"
                },
                {
                    "name": "successCallback!~YUIDOC_LINE~!",
                    "description": "called with the new Entry object",
                    "type": "Function"
                },
                {
                    "name": "errorCallback!~YUIDOC_LINE~!",
                    "description": "called with a FileError",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 2357,
            "description": "Return a URL that can be used to identify this entry.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 2365,
            "description": "Returns a URI that can be used to identify this entry.",
            "params": [
                {
                    "name": "mimeType",
                    "description": "for a FileEntry, the mime type to be used to interpret the file, when loaded through this URI.",
                    "type": "DOMString"
                }
            ],
            "return": {
                "description": "uri"
            },
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 2377,
            "description": "Remove a file or directory. It is an error to attempt to delete a\ndirectory that is not empty. It is an error to attempt to delete a\nroot directory of a file system.",
            "params": [
                {
                    "name": "successCallback",
                    "description": "called with no parameters",
                    "type": "Function"
                },
                {
                    "name": "errorCallback",
                    "description": "called with a FileError",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 2392,
            "description": "Look up the parent DirectoryEntry of this entry.",
            "params": [
                {
                    "name": "successCallback",
                    "description": "called with the parent DirectoryEntry object",
                    "type": "Function"
                },
                {
                    "name": "errorCallback",
                    "description": "called with a FileError",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 2417,
            "description": "Constructor.\nname {DOMString} name of the file, without path information\nfullPath {DOMString} the full path of the file, including the name\ntype {DOMString} mime type\nlastModifiedDate {Date} last modified date\nsize {Number} size of the file in bytes",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 2448,
            "description": "An interface representing a file on the file system.\n\n{boolean} isFile always true (readonly)\n{boolean} isDirectory always false (readonly)\n{DOMString} name of the file, excluding the path leading to it (readonly)\n{DOMString} fullPath the absolute full path to the file (readonly)\n{FileSystem} filesystem on which the file resides (readonly)",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 2463,
            "description": "Creates a new FileWriter associated with the file that this FileEntry represents.",
            "params": [
                {
                    "name": "successCallback",
                    "description": "is called with the new FileWriter",
                    "type": "Function"
                },
                {
                    "name": "errorCallback",
                    "description": "is called with a FileError",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 2485,
            "description": "Returns a File that represents the current state of the file that this FileEntry represents.",
            "params": [
                {
                    "name": "successCallback",
                    "description": "is called with the new File object",
                    "type": "Function"
                },
                {
                    "name": "errorCallback",
                    "description": "is called with a FileError",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 2510,
            "description": "FileError",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 2545,
            "description": "This class reads the mobile device file system.\n\nFor Android:\n     The root directory is the root of the file system.\n     To read from the SD card, the file name is \"sdcard/my_file.txt\"",
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 2578,
            "description": "Abort reading file.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 2600,
            "description": "Read text file.",
            "params": [
                {
                    "name": "file",
                    "description": "File object containing file properties",
                    "type": "File"
                },
                {
                    "name": "encoding",
                    "description": "[Optional] (see http://www.iana.org/assignments/character-sets)"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 2687,
            "description": "Read file and return data as a base64 encoded data url.\nA data url is of the form:\n     data:[<mediatype>][;base64],<data>",
            "params": [
                {
                    "name": "file",
                    "description": "File object containing file properties",
                    "type": "File"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 2769,
            "description": "Read file and return data as a binary data.",
            "params": [
                {
                    "name": "file",
                    "description": "File object containing file properties",
                    "type": "File"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 2779,
            "description": "Read file and return data as a binary data.",
            "params": [
                {
                    "name": "file",
                    "description": "File object containing file properties",
                    "type": "File"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 2798,
            "description": "An interface representing a file system",
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 2833,
            "description": "FileTransfer uploads a file to a remote server.",
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 2842,
            "description": "Given an absolute file path, uploads a file on the device to a remote server\nusing a multipart HTTP request.",
            "params": [
                {
                    "name": "filePath",
                    "description": "Full path of the file on the device",
                    "type": "String"
                },
                {
                    "name": "server",
                    "description": "URL of the server to receive the file",
                    "type": "String"
                },
                {
                    "name": "successCallback",
                    "description": "(Function}  Callback to be invoked when upload has completed"
                },
                {
                    "name": "errorCallback",
                    "description": "Callback to be invoked upon error",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "Optional parameters such as file name and mimetype",
                    "type": "FileUploadOptions"
                },
                {
                    "name": "trustAllHosts",
                    "description": "Optional trust all hosts (e.g. for self-signed certs), defaults to false",
                    "type": "Boolean"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 2896,
            "description": "Downloads a file form a given URL and saves it to the specified directory.",
            "params": [
                {
                    "name": "source",
                    "description": "URL of the server to receive the file",
                    "type": "String"
                },
                {
                    "name": "target",
                    "description": "Full path of the file on the device",
                    "type": "String"
                },
                {
                    "name": "successCallback",
                    "description": "(Function}  Callback to be invoked when upload has completed"
                },
                {
                    "name": "errorCallback",
                    "description": "Callback to be invoked upon error",
                    "type": "Function"
                },
                {
                    "name": "trustAllHosts",
                    "description": "Optional trust all hosts (e.g. for self-signed certs), defaults to false",
                    "type": "Boolean"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 2937,
            "description": "Aborts the ongoing file transfer on this object",
            "params": [
                {
                    "name": "successCallback",
                    "description": "Callback to be invoked upon success",
                    "type": "Function"
                },
                {
                    "name": "errorCallback",
                    "description": "Callback to be invoked upon error",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 2953,
            "description": "FileTransferError",
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 2976,
            "description": "Options to customize the HTTP request used to upload files.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "fileKey",
                    "description": "Name of file request parameter.",
                    "type": "String"
                },
                {
                    "name": "fileName",
                    "description": "Filename to be used by the server. Defaults to image.jpg.",
                    "type": "String"
                },
                {
                    "name": "mimeType",
                    "description": "Mimetype of the uploaded file. Defaults to image/jpeg.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Object with key: value params to send to the server.",
                    "type": "Object"
                },
                {
                    "name": "headers",
                    "description": "Keys are header names, values are header values. Multiple\n                          headers of the same name are not supported.",
                    "type": "Object"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 3001,
            "description": "FileUploadResult",
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 3022,
            "description": "This class writes to the mobile device file system.\n\nFor Android:\n     The root directory is the root of the file system.\n     To write to the SD card, the file name is \"sdcard/my_file.txt\"",
            "is_constructor": 1,
            "params": [
                {
                    "name": "file",
                    "description": "File object containing file properties",
                    "type": "File"
                },
                {
                    "name": "append",
                    "description": "if true write to the end of the file, otherwise overwrite the file"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 3064,
            "description": "Abort writing file.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 3089,
            "description": "Writes data to the file",
            "params": [
                {
                    "name": "text",
                    "description": "to be written"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 3163,
            "description": "Moves the file pointer to the location specified.\n\nIf the offset is a negative number the position of the file\npointer is rewound.  If the offset is greater than the file\nsize the position is set to the end of the file.",
            "params": [
                {
                    "name": "offset",
                    "description": "is the location to move the file pointer to."
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 3198,
            "description": "Truncates the file to the size specified.",
            "params": [
                {
                    "name": "size",
                    "description": "to chop the file at."
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 3277,
            "description": "Supplies arguments to methods that lookup or create files and directories.",
            "params": [
                {
                    "name": "create!~YUIDOC_LINE~!",
                    "description": "file or directory if it doesn't exist",
                    "type": "Boolean"
                },
                {
                    "name": "exclusive!~YUIDOC_LINE~!",
                    "description": "used with create; if true the command will fail if\n           target path exists",
                    "type": "Boolean"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 3299,
            "description": "Globalization error object",
            "is_constructor": 1,
            "params": [
                {
                    "name": "code",
                    "description": ""
                },
                {
                    "name": "message",
                    "description": ""
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 3382,
            "description": "Represents a local file system.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 3404,
            "description": "This class provides access to the device media, interfaces to both sound and video",
            "is_constructor": 1,
            "params": [
                {
                    "name": "src",
                    "description": "The file name or url to play"
                },
                {
                    "name": "successCallback",
                    "description": "The callback to be called when the file is done playing or recording.\n                                 successCallback()"
                },
                {
                    "name": "errorCallback",
                    "description": "The callback to be called if there is an error.\n                                 errorCallback(int errorCode) - OPTIONAL"
                },
                {
                    "name": "statusCallback",
                    "description": "The callback to be called when media status has changed.\n                                 statusCallback(int statusCode) - OPTIONAL"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 3466,
            "description": "Start or resume playing audio file.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 3473,
            "description": "Stop playing audio file.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 3483,
            "description": "Seek or jump to a new time in the track..",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 3493,
            "description": "Pause playing audio file.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 3500,
            "description": "Get duration of an audio file.\nThe duration is only set for audio that is playing, paused or stopped.",
            "return": {
                "description": "duration or -1 if not known."
            },
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 3510,
            "description": "Get position of audio.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 3521,
            "description": "Start recording audio file.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 3528,
            "description": "Stop recording audio file.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 3535,
            "description": "Release the resources.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 3542,
            "description": "Adjust the volume.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 3549,
            "description": "Audio has status update.\nPRIVATE",
            "params": [
                {
                    "name": "id",
                    "description": "The media object id (string)"
                },
                {
                    "name": "msgType",
                    "description": "The 'type' of update this is"
                },
                {
                    "name": "value",
                    "description": "Use of value is determined by the msgType"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 3596,
            "description": "This class contains information about any Media errors.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 3640,
            "description": "Represents a single file.\n\nname {DOMString} name of the file, without path information\nfullPath {DOMString} the full path of the file, including the name\ntype {DOMString} mime type\nlastModifiedDate {Date} last modified date\nsize {Number} size of the file in bytes",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 3655,
            "description": "Request capture format data for a specific file and type",
            "params": [
                {
                    "name": "successCB",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "errorCB",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 3676,
            "description": "MediaFileData encapsulates format information of a media file.",
            "params": [
                {
                    "name": "codecs",
                    "description": "",
                    "type": "DOMString"
                },
                {
                    "name": "bitrate",
                    "description": "",
                    "type": "Long"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Long"
                },
                {
                    "name": "width",
                    "description": "",
                    "type": "Long"
                },
                {
                    "name": "duration",
                    "description": "",
                    "type": "Float"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 3700,
            "description": "Information about the state of the file or directory\n\n{Date} modificationTime (readonly)",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 3734,
            "description": "Position error object",
            "is_constructor": 1,
            "params": [
                {
                    "name": "code",
                    "description": ""
                },
                {
                    "name": "message",
                    "description": ""
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 3809,
            "description": "This class provides access to device accelerometer data.",
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 3870,
            "description": "Asynchronously acquires the current acceleration.",
            "params": [
                {
                    "name": "successCallback",
                    "description": "The function to call when the acceleration data is available",
                    "type": "Function"
                },
                {
                    "name": "errorCallback",
                    "description": "The function to call when there is an error getting the acceleration data. (OPTIONAL)",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "The options for getting the accelerometer data such as timeout. (OPTIONAL)",
                    "type": "AccelerationOptions"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 3898,
            "description": "Asynchronously acquires the acceleration repeatedly at a given interval.",
            "params": [
                {
                    "name": "successCallback",
                    "description": "The function to call each time the acceleration data is available",
                    "type": "Function"
                },
                {
                    "name": "errorCallback",
                    "description": "The function to call when there is an error getting the acceleration data. (OPTIONAL)",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "The options for getting the accelerometer data such as timeout. (OPTIONAL)",
                    "type": "AccelerationOptions"
                }
            ],
            "return": {
                "description": "String                       The watch id that must be passed to #clearWatch to stop watching."
            },
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 3942,
            "description": "Clears the specified accelerometer watch.",
            "params": [
                {
                    "name": "id",
                    "description": "The id of the watch returned from #watchAcceleration.",
                    "type": "String"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 3967,
            "description": "Clear the resource cache.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 3974,
            "description": "Load the url into the webview or into new browser instance.",
            "params": [
                {
                    "name": "url",
                    "description": "The URL to load"
                },
                {
                    "name": "props",
                    "description": "Properties that can be passed in to the activity:\n     wait: int                           => wait msec before loading URL\n     loadingDialog: \"Title,Message\"      => display a native loading dialog\n     loadUrlTimeoutValue: int            => time in msec to wait before triggering a timeout error\n     clearHistory: boolean              => clear webview history (default=false)\n     openExternal: boolean              => open in a new browser (default=false)\n\nExample:\n     navigator.app.loadUrl(\"http://server/myapp/index.html\", );",
                    "type": "Wait:2000, loadingDialog:\"Wait,Loading App\", loadUrlTimeoutValue: 60000"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 3992,
            "description": "Cancel loadUrl that is waiting to be loaded.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 3999,
            "description": "Clear web history in this web view.\nInstead of BACK button loading the previous web page, it will exit the app.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 4007,
            "description": "Go to previous page displayed.\nThis is the same as pressing the backbutton on Android device.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 4015,
            "description": "Override the default behavior of the Android back button.\nIf overridden, when the back button is pressed, the \"backKeyDown\" JavaScript event will be fired.\n\nNote: The user should not have to call this method.  Instead, when the user\n      registers for the \"backbutton\" event, this is automatically done.",
            "params": [
                {
                    "name": "override",
                    "description": "T=override, F=cancel override"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 4028,
            "description": "Exit and terminate the application.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 4107,
            "description": "Provides Android enhanced notification API.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 4122,
            "description": "Close an activity dialog",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 4129,
            "description": "Display a progress dialog with progress bar that goes from 0 to 100.",
            "params": [
                {
                    "name": "!~YUIDOC_LINE~!",
                    "description": "title Title of the progress dialog.",
                    "type": "String"
                },
                {
                    "name": "!~YUIDOC_LINE~!",
                    "description": "message Message to display in the dialog.",
                    "type": "String"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 4141,
            "description": "Close the progress dialog.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 4148,
            "description": "Set the progress dialog value.",
            "params": [
                {
                    "name": "!~YUIDOC_LINE~!",
                    "description": "value 0-100",
                    "type": "Number"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 4187,
            "description": "SQL result set object\nPRIVATE METHOD",
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 4197,
            "description": "Get item from SQL result set",
            "params": [
                {
                    "name": "row",
                    "description": "The row number to return"
                }
            ],
            "return": {
                "description": "The row object"
            },
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 4207,
            "description": "SQL result set that is returned to user.\nPRIVATE METHOD",
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 4216,
            "description": "Callback from native code when query is complete.\nPRIVATE METHOD",
            "params": [
                {
                    "name": "id",
                    "description": "Query id"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 4256,
            "description": "Callback from native code when query fails\nPRIVATE METHOD",
            "params": [
                {
                    "name": "reason",
                    "description": "Error message"
                },
                {
                    "name": "id",
                    "description": "Query id"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 4295,
            "description": "SQL query object\nPRIVATE METHOD",
            "is_constructor": 1,
            "params": [
                {
                    "name": "tx",
                    "description": "The transaction object that this query belongs to"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 4325,
            "description": "Transaction object\nPRIVATE METHOD",
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 4343,
            "description": "Mark query in transaction as complete.\nIf all queries are complete, call the user's transaction success callback.",
            "params": [
                {
                    "name": "id",
                    "description": "Query id"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 4371,
            "description": "Mark query in transaction as failed.",
            "params": [
                {
                    "name": "id",
                    "description": "Query id"
                },
                {
                    "name": "reason",
                    "description": "Error message"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 4394,
            "description": "Execute SQL statement",
            "params": [
                {
                    "name": "sql",
                    "description": "SQL statement to execute"
                },
                {
                    "name": "params",
                    "description": "Statement parameters"
                },
                {
                    "name": "successCallback",
                    "description": "Success callback"
                },
                {
                    "name": "errorCallback",
                    "description": "Error callback"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 4424,
            "description": "Start a transaction.\nDoes not support rollback in event of failure.",
            "params": [
                {
                    "name": "process",
                    "description": "The transaction function",
                    "type": "Function"
                },
                {
                    "name": "successCallback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "errorCallback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 4450,
            "description": "Open database",
            "params": [
                {
                    "name": "name",
                    "description": "Database name"
                },
                {
                    "name": "version",
                    "description": "Database version"
                },
                {
                    "name": "display_name",
                    "description": "Database display name"
                },
                {
                    "name": "size",
                    "description": "Database size in bytes"
                }
            ],
            "return": {
                "description": "Database object"
            },
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 4465,
            "description": "For browsers with no localStorage we emulate it with SQLite. Follows the w3c api.\nTODO: Do similar for sessionStorage.",
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 4564,
            "description": "This class contains information about the current battery status.",
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 4590,
            "description": "Event handlers for when callbacks get registered for the battery.\nKeep track of how many handlers we have so we can start and stop the native battery listener\nappropriately (and hopefully save on battery life!).",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 4604,
            "description": "Callback for battery status",
            "params": [
                {
                    "name": "info",
                    "description": "keys: level, isPlugged",
                    "type": "Object"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 4632,
            "description": "Error callback for battery start",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 4651,
            "description": "Launches a capture of different types.",
            "params": [
                {
                    "name": "(DOMString}",
                    "description": "type"
                },
                {
                    "name": "successCB",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "errorCB",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "CaptureVideoOptions"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 4676,
            "description": "The Capture interface exposes an interface to the camera and microphone of the hosting device.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 4685,
            "description": "Launch audio recorder application for recording audio clip(s).",
            "params": [
                {
                    "name": "successCB",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "errorCB",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "CaptureAudioOptions"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 4696,
            "description": "Launch camera application for taking image(s).",
            "params": [
                {
                    "name": "successCB",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "errorCB",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "CaptureImageOptions"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 4707,
            "description": "Launch device camera application for recording video(s).",
            "params": [
                {
                    "name": "successCB",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "errorCB",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "CaptureVideoOptions"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 4733,
            "description": "Asynchronously acquires the current heading.",
            "params": [
                {
                    "name": "successCallback",
                    "description": "The function to call when the heading\ndata is available",
                    "type": "Function"
                },
                {
                    "name": "errorCallback",
                    "description": "The function to call when there is an error\ngetting the heading data.",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "The options for getting the heading data (not used).",
                    "type": "CompassOptions"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 4757,
            "description": "Asynchronously acquires the heading repeatedly at a given interval.",
            "params": [
                {
                    "name": "successCallback",
                    "description": "The function to call each time the heading\ndata is available",
                    "type": "Function"
                },
                {
                    "name": "errorCallback",
                    "description": "The function to call when there is an error\ngetting the heading data.",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "The options for getting the heading data\nsuch as timeout and the frequency of the watch. For iOS, filter parameter\nspecifies to watch via a distance filter rather than time.",
                    "type": "HeadingOptions"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 4788,
            "description": "Clears the specified heading watch.",
            "params": [
                {
                    "name": "watchId",
                    "description": "The ID of the watch returned from #watchHeading.",
                    "type": "String"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 4991,
            "description": "Represents a group of Contacts.",
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 4996,
            "description": "Returns an array of Contacts matching the search criteria.",
            "params": [
                {
                    "name": "fields",
                    "description": "that should be searched"
                },
                {
                    "name": "successCB",
                    "description": "success callback"
                },
                {
                    "name": "errorCB",
                    "description": "error callback"
                },
                {
                    "name": "options",
                    "description": "that can be applied to contact searching",
                    "type": "ContactFindOptions"
                }
            ],
            "return": {
                "description": "array of Contacts matching search criteria"
            },
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 5020,
            "description": "This function creates a new contact, but it does not persist the contact\nto device storage. To persist the contact to device storage, invoke\ncontact.save().",
            "params": [
                {
                    "name": "properties",
                    "description": "an object whose properties will be examined to create a new Contact"
                }
            ],
            "return": {
                "description": "new Contact object"
            },
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 5054,
            "description": "This represents the mobile device, and provides properties for inspecting the model, version, UUID of the\nphone, etc.",
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 5087,
            "description": "Get device info",
            "params": [
                {
                    "name": "successCallback",
                    "description": "The function to call when the heading data is available",
                    "type": "Function"
                },
                {
                    "name": "errorCallback",
                    "description": "The function to call when there is an error getting the heading data. (OPTIONAL)",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 5107,
            "description": "Sends the given message through exec() to the Echo plugin, which sends it back to the successCallback.",
            "params": [
                {
                    "name": "successCallback",
                    "description": "invoked with a FileSystem object"
                },
                {
                    "name": "errorCallback",
                    "description": "invoked if error occurs retrieving file system"
                },
                {
                    "name": "message",
                    "description": "The string to be echoed."
                },
                {
                    "name": "forceAsync",
                    "description": "Whether to force an async return value (for testing native->js bridge)."
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 5175,
            "description": "Asynchronously acquires the current position.",
            "params": [
                {
                    "name": "successCallback",
                    "description": "The function to call when the position data is available",
                    "type": "Function"
                },
                {
                    "name": "errorCallback",
                    "description": "The function to call when there is an error getting the heading position. (OPTIONAL)",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "The options for getting the position data. (OPTIONAL)",
                    "type": "PositionOptions"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 5249,
            "description": "Asynchronously watches the geolocation for changes to geolocation.  When a change occurs,\nthe successCallback is called with the new location.",
            "params": [
                {
                    "name": "successCallback",
                    "description": "The function to call each time the location data is available",
                    "type": "Function"
                },
                {
                    "name": "errorCallback",
                    "description": "The function to call when there is an error getting the location data. (OPTIONAL)",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "The options for getting the location data such as frequency. (OPTIONAL)",
                    "type": "PositionOptions"
                }
            ],
            "return": {
                "description": "String                       The watch id that must be passed to #clearWatch to stop watching."
            },
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 5300,
            "description": "Clears the specified heading watch.",
            "params": [
                {
                    "name": "id",
                    "description": "The ID of the watch returned from #watchPosition",
                    "type": "String"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 5327,
            "description": "Returns the string identifier for the client's current language.\nIt returns the language identifier string to the successCB callback with a\nproperties object as a parameter. If there is an error getting the language,\nthen the errorCB callback is invoked.",
            "params": [
                {
                    "name": "successCB",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "errorCB",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Object.value : The language identifier",
                "type": "String"
            },
            "error": "GlobalizationError.UNKNOWN_ERROR\n\nExample\n   globalization.getPreferredLanguage(function (language) {alert('language:' + language.value + '\\n');},\n                               function () {});",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 5349,
            "description": "Returns the string identifier for the client's current locale setting.\nIt returns the locale identifier string to the successCB callback with a\nproperties object as a parameter. If there is an error getting the locale,\nthen the errorCB callback is invoked.",
            "params": [
                {
                    "name": "successCB",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "errorCB",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Object.value : The locale identifier",
                "type": "String"
            },
            "error": "GlobalizationError.UNKNOWN_ERROR\n\nExample\n   globalization.getLocaleName(function (locale) {alert('locale:' + locale.value + '\\n');},\n                               function () {});",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 5372,
            "description": "Returns a date formatted as a string according to the client's user preferences and\ncalendar using the time zone of the client. It returns the formatted date string to the\nsuccessCB callback with a properties object as a parameter. If there is an error\nformatting the date, then the errorCB callback is invoked.\n\nThe defaults are: formatLenght=\"short\" and selector=\"date and time\"",
            "params": [
                {
                    "name": "date",
                    "description": "",
                    "type": "Date"
                },
                {
                    "name": "successCB",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "errorCB",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "{optional}\n           formatLength {String}: 'short', 'medium', 'long', or 'full'\n           selector {String}: 'date', 'time', or 'date and time'",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Object.value : The localized date string",
                "type": "String"
            },
            "error": "GlobalizationError.FORMATTING_ERROR\n\nExample\n   globalization.dateToString(new Date(),\n               function (date) {alert('date:' + date.value + '\\n');},\n               function (errorCode) {alert(errorCode);},\n               {formatLength:'short'});",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 5404,
            "description": "Parses a date formatted as a string according to the client's user\npreferences and calendar using the time zone of the client and returns\nthe corresponding date object. It returns the date to the successCB\ncallback with a properties object as a parameter. If there is an error\nparsing the date string, then the errorCB callback is invoked.\n\nThe defaults are: formatLength=\"short\" and selector=\"date and time\"",
            "params": [
                {
                    "name": "dateString",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "successCB",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "errorCB",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "{optional}\n           formatLength {String}: 'short', 'medium', 'long', or 'full'\n           selector {String}: 'date', 'time', or 'date and time'",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Object.year : The four digit year\n           Object.month {Number}: The month from (0 - 11)\n           Object.day {Number}: The day from (1 - 31)\n           Object.hour {Number}: The hour from (0 - 23)\n           Object.minute {Number}: The minute from (0 - 59)\n           Object.second {Number}: The second from (0 - 59)\n           Object.millisecond {Number}: The milliseconds (from 0 - 999),\n                                       not available on all platforms",
                "type": "Number"
            },
            "error": "GlobalizationError.PARSING_ERROR\n\nExample\n   globalization.stringToDate('4/11/2011',\n               function (date) { alert('Month:' + date.month + '\\n' +\n                   'Day:' + date.day + '\\n' +\n                   'Year:' + date.year + '\\n');},\n               function (errorCode) {alert(errorCode);},\n               {selector:'date'});",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 5445,
            "description": "Returns a pattern string for formatting and parsing dates according to the client's\nuser preferences. It returns the pattern to the successCB callback with a\nproperties object as a parameter. If there is an error obtaining the pattern,\nthen the errorCB callback is invoked.\n\nThe defaults are: formatLength=\"short\" and selector=\"date and time\"",
            "params": [
                {
                    "name": "successCB",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "errorCB",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "{optional}\n           formatLength {String}: 'short', 'medium', 'long', or 'full'\n           selector {String}: 'date', 'time', or 'date and time'",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Object.pattern : The date and time pattern for formatting and parsing dates.\n                                   The patterns follow Unicode Technical Standard #35\n                                   http://unicode.org/reports/tr35/tr35-4.html\n           Object.timezone {String}: The abbreviated name of the time zone on the client\n           Object.utc_offset {Number}: The current difference in seconds between the client's\n                                       time zone and coordinated universal time.\n           Object.dst_offset {Number}: The current daylight saving time offset in seconds\n                                       between the client's non-daylight saving's time zone\n                                       and the client's daylight saving's time zone.",
                "type": "String"
            },
            "error": "GlobalizationError.PATTERN_ERROR\n\nExample\n   globalization.getDatePattern(\n               function (date) {alert('pattern:' + date.pattern + '\\n');},\n               function () {},\n               {formatLength:'short'});",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 5483,
            "description": "Returns an array of either the names of the months or days of the week\naccording to the client's user preferences and calendar. It returns the array of names to the\nsuccessCB callback with a properties object as a parameter. If there is an error obtaining the\nnames, then the errorCB callback is invoked.\n\nThe defaults are: type=\"wide\" and item=\"months\"",
            "params": [
                {
                    "name": "successCB",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "errorCB",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "{optional}\n           type {String}: 'narrow' or 'wide'\n           item {String}: 'months', or 'days'",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Object.value }: The array of names starting from either\n                                       the first month in the year or the\n                                       first day of the week.",
                "type": "ArrayString"
            },
            "error": "GlobalizationError.UNKNOWN_ERROR\n\nExample\n   globalization.getDateNames(function (names) {\n       for(var i = 0; i < names.value.length; i++) {\n           alert('Month:' + names.value[i] + '\\n');}},\n       function () {});",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 5513,
            "description": "Returns whether daylight savings time is in effect for a given date using the client's\ntime zone and calendar. It returns whether or not daylight savings time is in effect\nto the successCB callback with a properties object as a parameter. If there is an error\nreading the date, then the errorCB callback is invoked.",
            "params": [
                {
                    "name": "date",
                    "description": "",
                    "type": "Date"
                },
                {
                    "name": "successCB",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "errorCB",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Object.dst : The value \"true\" indicates that daylight savings time is\n                               in effect for the given date and \"false\" indicate that it is not.",
                "type": "Boolean"
            },
            "error": "GlobalizationError.UNKNOWN_ERROR\n\nExample\n   globalization.isDayLightSavingsTime(new Date(),\n               function (date) {alert('dst:' + date.dst + '\\n');}\n               function () {});",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 5539,
            "description": "Returns the first day of the week according to the client's user preferences and calendar.\nThe days of the week are numbered starting from 1 where 1 is considered to be Sunday.\nIt returns the day to the successCB callback with a properties object as a parameter.\nIf there is an error obtaining the pattern, then the errorCB callback is invoked.",
            "params": [
                {
                    "name": "successCB",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "errorCB",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Object.value : The number of the first day of the week.",
                "type": "Number"
            },
            "error": "GlobalizationError.UNKNOWN_ERROR\n\nExample\n   globalization.getFirstDayOfWeek(function (day)\n               { alert('Day:' + day.value + '\\n');},\n               function () {});",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 5563,
            "description": "Returns a number formatted as a string according to the client's user preferences.\nIt returns the formatted number string to the successCB callback with a properties object as a\nparameter. If there is an error formatting the number, then the errorCB callback is invoked.\n\nThe defaults are: type=\"decimal\"",
            "params": [
                {
                    "name": "number",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "successCB",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "errorCB",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "{optional}\n           type {String}: 'decimal', \"percent\", or 'currency'",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Object.value : The formatted number string.",
                "type": "String"
            },
            "error": "GlobalizationError.FORMATTING_ERROR\n\nExample\n   globalization.numberToString(3.25,\n               function (number) {alert('number:' + number.value + '\\n');},\n               function () {},\n               {type:'decimal'});",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 5591,
            "description": "Parses a number formatted as a string according to the client's user preferences and\nreturns the corresponding number. It returns the number to the successCB callback with a\nproperties object as a parameter. If there is an error parsing the number string, then\nthe errorCB callback is invoked.\n\nThe defaults are: type=\"decimal\"",
            "params": [
                {
                    "name": "numberString",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "successCB",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "errorCB",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "{optional}\n           type {String}: 'decimal', \"percent\", or 'currency'",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Object.value : The parsed number.",
                "type": "Number"
            },
            "error": "GlobalizationError.PARSING_ERROR\n\nExample\n   globalization.stringToNumber('1234.56',\n               function (number) {alert('Number:' + number.value + '\\n');},\n               function () { alert('Error parsing number');});",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 5619,
            "description": "Returns a pattern string for formatting and parsing numbers according to the client's user\npreferences. It returns the pattern to the successCB callback with a properties object as a\nparameter. If there is an error obtaining the pattern, then the errorCB callback is invoked.\n\nThe defaults are: type=\"decimal\"",
            "params": [
                {
                    "name": "successCB",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "errorCB",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "{optional}\n           type {String}: 'decimal', \"percent\", or 'currency'",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Object.pattern : The number pattern for formatting and parsing numbers.\n                                   The patterns follow Unicode Technical Standard #35.\n                                   http://unicode.org/reports/tr35/tr35-4.html\n           Object.symbol {String}: The symbol to be used when formatting and parsing\n                                   e.g., percent or currency symbol.\n           Object.fraction {Number}: The number of fractional digits to use when parsing and\n                                   formatting numbers.\n           Object.rounding {Number}: The rounding increment to use when parsing and formatting.\n           Object.positive {String}: The symbol to use for positive numbers when parsing and formatting.\n           Object.negative: {String}: The symbol to use for negative numbers when parsing and formatting.\n           Object.decimal: {String}: The decimal symbol to use for parsing and formatting.\n           Object.grouping: {String}: The grouping symbol to use for parsing and formatting.",
                "type": "String"
            },
            "error": "GlobalizationError.PATTERN_ERROR\n\nExample\n   globalization.getNumberPattern(\n               function (pattern) {alert('Pattern:' + pattern.pattern + '\\n');},\n               function () {});",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 5656,
            "description": "Returns a pattern string for formatting and parsing currency values according to the client's\nuser preferences and ISO 4217 currency code. It returns the pattern to the successCB callback with a\nproperties object as a parameter. If there is an error obtaining the pattern, then the errorCB\ncallback is invoked.",
            "params": [
                {
                    "name": "currencyCode",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "successCB",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "errorCB",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Object.pattern : The currency pattern for formatting and parsing currency values.\n                                   The patterns follow Unicode Technical Standard #35\n                                   http://unicode.org/reports/tr35/tr35-4.html\n           Object.code {String}: The ISO 4217 currency code for the pattern.\n           Object.fraction {Number}: The number of fractional digits to use when parsing and\n                                   formatting currency.\n           Object.rounding {Number}: The rounding increment to use when parsing and formatting.\n           Object.decimal: {String}: The decimal symbol to use for parsing and formatting.\n           Object.grouping: {String}: The grouping symbol to use for parsing and formatting.",
                "type": "String"
            },
            "error": "GlobalizationError.FORMATTING_ERROR\n\nExample\n   globalization.getCurrencyPattern('EUR',\n               function (currency) {alert('Pattern:' + currency.pattern + '\\n');}\n               function () {});",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 5728,
            "description": "Logging levels",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 5754,
            "description": "Getter/Setter for the logging level\n\nReturns the current logging level.\n\nWhen a value is passed, sets the logging level to that value.\nThe values should be one of the following constants:\n   logger.LOG\n   logger.ERROR\n   logger.WARN\n   logger.INFO\n   logger.DEBUG\n\nThe value used determines which messages get printed.  The logging\nvalues above are in order, and only messages logged at the logging\nlevel or above will actually be displayed to the user.  E.g., the\ndefault level is WARN, so only messages logged with LOG, ERROR, or\nWARN will be displayed; INFO and DEBUG messages will be ignored.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 5784,
            "description": "Getter/Setter for the useConsole functionality\n\nWhen useConsole is true, the logger will log via the\nbrowser 'console' object.  Otherwise, it will use the\nnative Logger plugin.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 5813,
            "description": "Logs a message at the LOG level.\n\nParameters passed after message are used applied to\nthe message with utils.format()",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 5821,
            "description": "Logs a message at the ERROR level.\n\nParameters passed after message are used applied to\nthe message with utils.format()",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 5829,
            "description": "Logs a message at the WARN level.\n\nParameters passed after message are used applied to\nthe message with utils.format()",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 5837,
            "description": "Logs a message at the INFO level.\n\nParameters passed after message are used applied to\nthe message with utils.format()",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 5845,
            "description": "Logs a message at the DEBUG level.\n\nParameters passed after message are used applied to\nthe message with utils.format()",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 5859,
            "description": "Logs a message at the specified level.\n\nParameters passed after message are used applied to\nthe message with utils.format()",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 5943,
            "description": "Get connection info",
            "params": [
                {
                    "name": "successCallback",
                    "description": "The function to call when the Connection data is available",
                    "type": "Function"
                },
                {
                    "name": "errorCallback",
                    "description": "The function to call when there is an error getting the Connection data. (OPTIONAL)",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 5999,
            "description": "Provides access to notifications on the device.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 6005,
            "description": "Open a native alert dialog, with a customizable title and button text.",
            "params": [
                {
                    "name": "message",
                    "description": "Message to print in the body of the alert",
                    "type": "String"
                },
                {
                    "name": "completeCallback",
                    "description": "The callback that is called when user clicks on a button.",
                    "type": "Function"
                },
                {
                    "name": "title",
                    "description": "Title of the alert dialog (default: Alert)",
                    "type": "String"
                },
                {
                    "name": "buttonLabel",
                    "description": "Label of the close button (default: OK)",
                    "type": "String"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 6019,
            "description": "Open a native confirm dialog, with a customizable title and button text.\nThe result that the user selects is returned to the result callback.",
            "params": [
                {
                    "name": "message",
                    "description": "Message to print in the body of the alert",
                    "type": "String"
                },
                {
                    "name": "resultCallback",
                    "description": "The callback that is called when user clicks on a button.",
                    "type": "Function"
                },
                {
                    "name": "title",
                    "description": "Title of the alert dialog (default: Confirm)",
                    "type": "String"
                },
                {
                    "name": "buttonLabels",
                    "description": "Comma separated list of the labels of the buttons (default: 'OK,Cancel')",
                    "type": "String"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 6034,
            "description": "Causes the device to vibrate.",
            "params": [
                {
                    "name": "mills",
                    "description": "The number of milliseconds to vibrate for.",
                    "type": "Integer"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 6043,
            "description": "Causes the device to beep.\nOn Android, the default notification ringtone is played \"count\" times.",
            "params": [
                {
                    "name": "count",
                    "description": "The number of beeps.",
                    "type": "Integer"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 6064,
            "description": "Request a file system in which to store application data.",
            "params": [
                {
                    "name": "type",
                    "description": "local file system type"
                },
                {
                    "name": "size",
                    "description": "indicates how much storage space, in bytes, the application expects to need"
                },
                {
                    "name": "successCallback",
                    "description": "invoked with a FileSystem object"
                },
                {
                    "name": "errorCallback",
                    "description": "invoked if error occurs retrieving file system"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 6111,
            "description": "Look up file system Entry referred to by local URI.",
            "params": [
                {
                    "name": "uri",
                    "description": "URI referring to a local file or directory",
                    "type": "DOMString"
                },
                {
                    "name": "successCallback",
                    "description": "invoked with Entry object corresponding to URI"
                },
                {
                    "name": "errorCallback",
                    "description": "invoked if error occurs retrieving file system entry"
                }
            ],
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 6174,
            "description": "Defines a property getter for obj[key].",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 6198,
            "description": "Returns whether the item was found in the array.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 6209,
            "description": "Returns an indication of whether the argument is an array or not",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 6216,
            "description": "Returns an indication of whether the argument is a Date or not",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 6223,
            "description": "Does a deep clone of the object.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 6250,
            "description": "Returns a wrapped version of the function",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 6265,
            "description": "Create a UUID",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 6276,
            "description": "Extends a child object from a parent object using classical inheritance\npattern.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 6292,
            "description": "Alerts a message in any available way: alert or console.log.",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 6303,
            "description": "Formats a string and arguments following it ala sprintf()\n\nsee utils.vformat() for more information",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 6313,
            "description": "Formats a string and arguments following it ala vsprintf()\n\nformat chars:\n  %j - format arg as JSON\n  %o - format arg as JSON\n  %c - format arg as ''\n  %% - replace with '%'\nany other char following % will format it's\narg via toString().\n\nfor rationale, see FireBug's Console API:\n   http://getfirebug.com/wiki/index.php/Console_API",
            "class": ""
        },
        {
            "file": "assets/www/cordova-2.3.0.js",
            "line": 6413,
            "description": "Create all cordova objects once page has fully loaded and native side is ready.",
            "class": ""
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " assets/www/cordova-2.3.0.js:5020"
        },
        {
            "message": "unknown tag: error",
            "line": " assets/www/cordova-2.3.0.js:5327"
        },
        {
            "message": "unknown tag: error",
            "line": " assets/www/cordova-2.3.0.js:5349"
        },
        {
            "message": "unknown tag: error",
            "line": " assets/www/cordova-2.3.0.js:5372"
        },
        {
            "message": "unknown tag: error",
            "line": " assets/www/cordova-2.3.0.js:5404"
        },
        {
            "message": "unknown tag: error",
            "line": " assets/www/cordova-2.3.0.js:5445"
        },
        {
            "message": "unknown tag: error",
            "line": " assets/www/cordova-2.3.0.js:5483"
        },
        {
            "message": "unknown tag: error",
            "line": " assets/www/cordova-2.3.0.js:5513"
        },
        {
            "message": "unknown tag: error",
            "line": " assets/www/cordova-2.3.0.js:5539"
        },
        {
            "message": "unknown tag: error",
            "line": " assets/www/cordova-2.3.0.js:5563"
        },
        {
            "message": "unknown tag: error",
            "line": " assets/www/cordova-2.3.0.js:5591"
        },
        {
            "message": "unknown tag: error",
            "line": " assets/www/cordova-2.3.0.js:5619"
        },
        {
            "message": "unknown tag: error",
            "line": " assets/www/cordova-2.3.0.js:5656"
        },
        {
            "message": "Missing item type\nListen for DOMContentLoaded and notify our channel subscribers.",
            "line": " assets/www/cordova-2.3.0.js:95"
        },
        {
            "message": "Missing item type\nIntercept calls to addEventListener + removeEventListener and handle deviceready,\nresume, and pause events.",
            "line": " assets/www/cordova-2.3.0.js:105"
        },
        {
            "message": "Missing item type\nHouses custom event handlers to intercept on document + window event listeners.",
            "line": " assets/www/cordova-2.3.0.js:114"
        },
        {
            "message": "Missing item type\nMethods to add/remove your own addEventListener hijacking on document + window.",
            "line": " assets/www/cordova-2.3.0.js:180"
        },
        {
            "message": "Missing item type\nRetrieve original event handlers that were replaced by Cordova",
            "line": " assets/www/cordova-2.3.0.js:198"
        },
        {
            "message": "Missing item type\nMethod to fire event from native code\nbNoDetach is required for events which cause an exception which needs to be caught in native code",
            "line": " assets/www/cordova-2.3.0.js:207"
        },
        {
            "message": "Missing item type\nPlugin callback mechanism.",
            "line": " assets/www/cordova-2.3.0.js:237"
        },
        {
            "message": "Missing item type\nCalled by native code when returning successful result from an action.",
            "line": " assets/www/cordova-2.3.0.js:257"
        },
        {
            "message": "Missing item type\nCalled by native code when returning error result from an action.",
            "line": " assets/www/cordova-2.3.0.js:268"
        },
        {
            "message": "Missing item type\nCalled by native code when returning the result from an action.",
            "line": " assets/www/cordova-2.3.0.js:281"
        },
        {
            "message": "Missing item type\nMerge properties from one object onto another recursively.  Properties from\nthe src object will overwrite existing target property.",
            "line": " assets/www/cordova-2.3.0.js:453"
        },
        {
            "message": "Missing item type\nCustom pub-sub \"channel\" that can have functions subscribed to it\nThis object is used to define and control firing of events for\ncordova initialization, as well as for custom events thereafter.\n\nThe order of events during page load and Cordova startup is as follows:\n\nonDOMContentLoaded*         Internal event that is received when the web page is loaded and parsed.\nonNativeReady*              Internal event that indicates the Cordova native side is ready.\nonCordovaReady*             Internal event fired when all Cordova JavaScript objects have been created.\nonCordovaInfoReady*         Internal event fired when device properties are available.\nonCordovaConnectionReady*   Internal event fired when the connection property has been set.\nonDeviceReady*              User event fired to indicate that Cordova is ready\nonResume                    User event fired to indicate a start/resume lifecycle event\nonPause                     User event fired to indicate a pause lifecycle event\nonDestroy*                  Internal event fired when app is being destroyed (User should use window.onunload event, not this one).\n\nThe events marked with an * are sticky. Once they have fired, they will stay in the fired state.\nAll listeners that subscribe after the event is fired will be executed right away.\n\nThe only Cordova events that user code should register for are:\n     deviceready           Cordova native code is initialized and Cordova APIs can be called from JavaScript\n     pause                 App has moved to background\n     resume                App has returned to foreground\n\nListeners can be registered as:\n     document.addEventListener(\"deviceready\", myDeviceReadyListener, false);\n     document.addEventListener(\"resume\", myResumeListener, false);\n     document.addEventListener(\"pause\", myPauseListener, false);\n\nThe DOM lifecycle events should be used for saving and restoring state\n     window.onload\n     window.onunload",
            "line": " assets/www/cordova-2.3.0.js:498"
        },
        {
            "message": "Missing item type\nChannel",
            "line": " assets/www/cordova-2.3.0.js:534"
        },
        {
            "message": "Missing item type\nCalls the provided function only after all of the channels specified\nhave been fired. All channels must be sticky channels.",
            "line": " assets/www/cordova-2.3.0.js:554"
        },
        {
            "message": "Missing item type\ncordova Channels that must fire before \"deviceready\" is fired.",
            "line": " assets/www/cordova-2.3.0.js:579"
        },
        {
            "message": "Missing item type\nIndicate that a feature needs to be initialized before it is ready to be used.\nThis holds up Cordova's \"deviceready\" event until the feature has been initialized\nand Cordova.initComplete(feature) is called.",
            "line": " assets/www/cordova-2.3.0.js:585"
        },
        {
            "message": "Missing item type\nIndicate that initialization code has completed and the feature is ready to be used.",
            "line": " assets/www/cordova-2.3.0.js:600"
        },
        {
            "message": "Missing item type\nSubscribes the given function to the channel. Any time that\nChannel.fire is called so too will the function.\nOptionally specify an execution context for the function\nand a guid that can be used to stop subscribing to the channel.\nReturns the guid.",
            "line": " assets/www/cordova-2.3.0.js:617"
        },
        {
            "message": "Missing item type\nUnsubscribes the function with the given guid from the channel.",
            "line": " assets/www/cordova-2.3.0.js:653"
        },
        {
            "message": "Missing item type\nCalls all functions subscribed to this channel.",
            "line": " assets/www/cordova-2.3.0.js:671"
        },
        {
            "message": "Missing item type\nExecute a cordova command.  It is up to the native side whether this action\nis synchronous or asynchronous.  The native side can return:\n     Synchronous: PluginResult object as a JSON string\n     Asynchronous: Empty string \"\"\nIf async, the native side will cordova.callbackSuccess or cordova.callbackError,\ndepending upon the result of the action.",
            "line": " assets/www/cordova-2.3.0.js:995"
        },
        {
            "message": "Missing item type\nGets a picture from source defined by \"options.sourceType\", and returns the\nimage as defined by the \"options.destinationType\" option.\n\nThe defaults are sourceType=CAMERA and destinationType=FILE_URI.",
            "line": " assets/www/cordova-2.3.0.js:1347"
        },
        {
            "message": "Missing item type\nEncapsulates options for iOS Popover image picker",
            "line": " assets/www/cordova-2.3.0.js:1495"
        },
        {
            "message": "Missing item type\nEncapsulates all audio capture operation configuration options.",
            "line": " assets/www/cordova-2.3.0.js:1515"
        },
        {
            "message": "Missing item type\nThe CaptureError interface encapsulates all errors in the Capture API.",
            "line": " assets/www/cordova-2.3.0.js:1534"
        },
        {
            "message": "Missing item type\nEncapsulates all image capture operation configuration options.",
            "line": " assets/www/cordova-2.3.0.js:1559"
        },
        {
            "message": "Missing item type\nEncapsulates all video capture operation configuration options.",
            "line": " assets/www/cordova-2.3.0.js:1576"
        },
        {
            "message": "Missing item type\nCompassError.\nAn error code assigned by an implementation when an error has occurred",
            "line": " assets/www/cordova-2.3.0.js:1595"
        },
        {
            "message": "Missing item type\nEncapsulates a set of parameters that the capture device supports.",
            "line": " assets/www/cordova-2.3.0.js:1628"
        },
        {
            "message": "Missing item type\nNetwork status",
            "line": " assets/www/cordova-2.3.0.js:1649"
        },
        {
            "message": "Missing item type\nConverts primitives into Complex Object\nCurrently only used for Date fields",
            "line": " assets/www/cordova-2.3.0.js:1671"
        },
        {
            "message": "Missing item type\nConverts Complex objects into primitives\nOnly conversion at present is for Dates.",
            "line": " assets/www/cordova-2.3.0.js:1685"
        },
        {
            "message": "Missing item type\nContains information about a single contact.",
            "line": " assets/www/cordova-2.3.0.js:1709"
        },
        {
            "message": "Missing item type\nRemoves contact from device storage.",
            "line": " assets/www/cordova-2.3.0.js:1746"
        },
        {
            "message": "Missing item type\nCreates a deep copy of this Contact.\nWith the contact ID set to null.",
            "line": " assets/www/cordova-2.3.0.js:1763"
        },
        {
            "message": "Missing item type\nPersists contact to device storage.",
            "line": " assets/www/cordova-2.3.0.js:1817"
        },
        {
            "message": "Missing item type\nContact address.",
            "line": " assets/www/cordova-2.3.0.js:1850"
        },
        {
            "message": "Missing item type\nContactError.\nAn error code assigned by an implementation when an error has occurred",
            "line": " assets/www/cordova-2.3.0.js:1881"
        },
        {
            "message": "Missing item type\nError codes",
            "line": " assets/www/cordova-2.3.0.js:1890"
        },
        {
            "message": "Missing item type\nGeneric contact field.",
            "line": " assets/www/cordova-2.3.0.js:1908"
        },
        {
            "message": "Missing item type\nContactFindOptions.",
            "line": " assets/www/cordova-2.3.0.js:1930"
        },
        {
            "message": "Missing item type\nContact name.",
            "line": " assets/www/cordova-2.3.0.js:1949"
        },
        {
            "message": "Missing item type\nContact organization.",
            "line": " assets/www/cordova-2.3.0.js:1975"
        },
        {
            "message": "Missing item type\nThis class contains position information.",
            "line": " assets/www/cordova-2.3.0.js:2004"
        },
        {
            "message": "Missing item type\nThe latitude of the position.",
            "line": " assets/www/cordova-2.3.0.js:2016"
        },
        {
            "message": "Missing item type\nThe longitude of the position,",
            "line": " assets/www/cordova-2.3.0.js:2020"
        },
        {
            "message": "Missing item type\nThe accuracy of the position.",
            "line": " assets/www/cordova-2.3.0.js:2024"
        },
        {
            "message": "Missing item type\nThe altitude of the position.",
            "line": " assets/www/cordova-2.3.0.js:2028"
        },
        {
            "message": "Missing item type\nThe direction the device is moving at the position.",
            "line": " assets/www/cordova-2.3.0.js:2032"
        },
        {
            "message": "Missing item type\nThe velocity with which the device is moving at the position.",
            "line": " assets/www/cordova-2.3.0.js:2036"
        },
        {
            "message": "Missing item type\nThe altitude accuracy of the position.",
            "line": " assets/www/cordova-2.3.0.js:2045"
        },
        {
            "message": "Missing item type\nAn interface representing a directory on the file system.\n\n{boolean} isFile always false (readonly)\n{boolean} isDirectory always true (readonly)\n{DOMString} name of the directory, excluding the path leading to it (readonly)\n{DOMString} fullPath the absolute full path to the directory (readonly)\nTODO: implement this!!! {FileSystem} filesystem on which the directory resides (readonly)",
            "line": " assets/www/cordova-2.3.0.js:2064"
        },
        {
            "message": "Missing item type\nCreates a new DirectoryReader to read entries from this directory",
            "line": " assets/www/cordova-2.3.0.js:2079"
        },
        {
            "message": "Missing item type\nCreates or looks up a directory",
            "line": " assets/www/cordova-2.3.0.js:2086"
        },
        {
            "message": "Missing item type\nDeletes a directory and all of it's contents",
            "line": " assets/www/cordova-2.3.0.js:2105"
        },
        {
            "message": "Missing item type\nCreates or looks up a file",
            "line": " assets/www/cordova-2.3.0.js:2118"
        },
        {
            "message": "Missing item type\nAn interface that lists the files and directories in a directory.",
            "line": " assets/www/cordova-2.3.0.js:2148"
        },
        {
            "message": "Missing item type\nReturns a list of entries from a directory.",
            "line": " assets/www/cordova-2.3.0.js:2155"
        },
        {
            "message": "Missing item type\nRepresents a file or directory on the local file system.",
            "line": " assets/www/cordova-2.3.0.js:2197"
        },
        {
            "message": "Missing item type\nLook up the metadata of the entry.",
            "line": " assets/www/cordova-2.3.0.js:2219"
        },
        {
            "message": "Missing item type\nSet the metadata of the entry.",
            "line": " assets/www/cordova-2.3.0.js:2239"
        },
        {
            "message": "Missing item type\nMove a file or directory to a new location.",
            "line": " assets/www/cordova-2.3.0.js:2254"
        },
        {
            "message": "Missing item type\nCopy a directory to a different location.",
            "line": " assets/www/cordova-2.3.0.js:2304"
        },
        {
            "message": "Missing item type\nReturn a URL that can be used to identify this entry.",
            "line": " assets/www/cordova-2.3.0.js:2357"
        },
        {
            "message": "Missing item type\nReturns a URI that can be used to identify this entry.",
            "line": " assets/www/cordova-2.3.0.js:2365"
        },
        {
            "message": "Missing item type\nRemove a file or directory. It is an error to attempt to delete a\ndirectory that is not empty. It is an error to attempt to delete a\nroot directory of a file system.",
            "line": " assets/www/cordova-2.3.0.js:2377"
        },
        {
            "message": "Missing item type\nLook up the parent DirectoryEntry of this entry.",
            "line": " assets/www/cordova-2.3.0.js:2392"
        },
        {
            "message": "Missing item type\nConstructor.\nname {DOMString} name of the file, without path information\nfullPath {DOMString} the full path of the file, including the name\ntype {DOMString} mime type\nlastModifiedDate {Date} last modified date\nsize {Number} size of the file in bytes",
            "line": " assets/www/cordova-2.3.0.js:2417"
        },
        {
            "message": "Missing item type\nAn interface representing a file on the file system.\n\n{boolean} isFile always true (readonly)\n{boolean} isDirectory always false (readonly)\n{DOMString} name of the file, excluding the path leading to it (readonly)\n{DOMString} fullPath the absolute full path to the file (readonly)\n{FileSystem} filesystem on which the file resides (readonly)",
            "line": " assets/www/cordova-2.3.0.js:2448"
        },
        {
            "message": "Missing item type\nCreates a new FileWriter associated with the file that this FileEntry represents.",
            "line": " assets/www/cordova-2.3.0.js:2463"
        },
        {
            "message": "Missing item type\nReturns a File that represents the current state of the file that this FileEntry represents.",
            "line": " assets/www/cordova-2.3.0.js:2485"
        },
        {
            "message": "Missing item type\nFileError",
            "line": " assets/www/cordova-2.3.0.js:2510"
        },
        {
            "message": "Missing item type\nThis class reads the mobile device file system.\n\nFor Android:\n     The root directory is the root of the file system.\n     To read from the SD card, the file name is \"sdcard/my_file.txt\"",
            "line": " assets/www/cordova-2.3.0.js:2545"
        },
        {
            "message": "Missing item type\nAbort reading file.",
            "line": " assets/www/cordova-2.3.0.js:2578"
        },
        {
            "message": "Missing item type\nRead text file.",
            "line": " assets/www/cordova-2.3.0.js:2600"
        },
        {
            "message": "Missing item type\nRead file and return data as a base64 encoded data url.\nA data url is of the form:\n     data:[<mediatype>][;base64],<data>",
            "line": " assets/www/cordova-2.3.0.js:2687"
        },
        {
            "message": "Missing item type\nRead file and return data as a binary data.",
            "line": " assets/www/cordova-2.3.0.js:2769"
        },
        {
            "message": "Missing item type\nRead file and return data as a binary data.",
            "line": " assets/www/cordova-2.3.0.js:2779"
        },
        {
            "message": "Missing item type\nAn interface representing a file system",
            "line": " assets/www/cordova-2.3.0.js:2798"
        },
        {
            "message": "Missing item type\nFileTransfer uploads a file to a remote server.",
            "line": " assets/www/cordova-2.3.0.js:2833"
        },
        {
            "message": "Missing item type\nGiven an absolute file path, uploads a file on the device to a remote server\nusing a multipart HTTP request.",
            "line": " assets/www/cordova-2.3.0.js:2842"
        },
        {
            "message": "Missing item type\nDownloads a file form a given URL and saves it to the specified directory.",
            "line": " assets/www/cordova-2.3.0.js:2896"
        },
        {
            "message": "Missing item type\nAborts the ongoing file transfer on this object",
            "line": " assets/www/cordova-2.3.0.js:2937"
        },
        {
            "message": "Missing item type\nFileTransferError",
            "line": " assets/www/cordova-2.3.0.js:2953"
        },
        {
            "message": "Missing item type\nOptions to customize the HTTP request used to upload files.",
            "line": " assets/www/cordova-2.3.0.js:2976"
        },
        {
            "message": "Missing item type\nFileUploadResult",
            "line": " assets/www/cordova-2.3.0.js:3001"
        },
        {
            "message": "Missing item type\nThis class writes to the mobile device file system.\n\nFor Android:\n     The root directory is the root of the file system.\n     To write to the SD card, the file name is \"sdcard/my_file.txt\"",
            "line": " assets/www/cordova-2.3.0.js:3022"
        },
        {
            "message": "Missing item type\nAbort writing file.",
            "line": " assets/www/cordova-2.3.0.js:3064"
        },
        {
            "message": "Missing item type\nWrites data to the file",
            "line": " assets/www/cordova-2.3.0.js:3089"
        },
        {
            "message": "Missing item type\nMoves the file pointer to the location specified.\n\nIf the offset is a negative number the position of the file\npointer is rewound.  If the offset is greater than the file\nsize the position is set to the end of the file.",
            "line": " assets/www/cordova-2.3.0.js:3163"
        },
        {
            "message": "Missing item type\nTruncates the file to the size specified.",
            "line": " assets/www/cordova-2.3.0.js:3198"
        },
        {
            "message": "Missing item type\nSupplies arguments to methods that lookup or create files and directories.",
            "line": " assets/www/cordova-2.3.0.js:3277"
        },
        {
            "message": "Missing item type\nGlobalization error object",
            "line": " assets/www/cordova-2.3.0.js:3299"
        },
        {
            "message": "Missing item type\nRepresents a local file system.",
            "line": " assets/www/cordova-2.3.0.js:3382"
        },
        {
            "message": "Missing item type\nThis class provides access to the device media, interfaces to both sound and video",
            "line": " assets/www/cordova-2.3.0.js:3404"
        },
        {
            "message": "Missing item type\nStart or resume playing audio file.",
            "line": " assets/www/cordova-2.3.0.js:3466"
        },
        {
            "message": "Missing item type\nStop playing audio file.",
            "line": " assets/www/cordova-2.3.0.js:3473"
        },
        {
            "message": "Missing item type\nSeek or jump to a new time in the track..",
            "line": " assets/www/cordova-2.3.0.js:3483"
        },
        {
            "message": "Missing item type\nPause playing audio file.",
            "line": " assets/www/cordova-2.3.0.js:3493"
        },
        {
            "message": "Missing item type\nGet duration of an audio file.\nThe duration is only set for audio that is playing, paused or stopped.",
            "line": " assets/www/cordova-2.3.0.js:3500"
        },
        {
            "message": "Missing item type\nGet position of audio.",
            "line": " assets/www/cordova-2.3.0.js:3510"
        },
        {
            "message": "Missing item type\nStart recording audio file.",
            "line": " assets/www/cordova-2.3.0.js:3521"
        },
        {
            "message": "Missing item type\nStop recording audio file.",
            "line": " assets/www/cordova-2.3.0.js:3528"
        },
        {
            "message": "Missing item type\nRelease the resources.",
            "line": " assets/www/cordova-2.3.0.js:3535"
        },
        {
            "message": "Missing item type\nAdjust the volume.",
            "line": " assets/www/cordova-2.3.0.js:3542"
        },
        {
            "message": "Missing item type\nAudio has status update.\nPRIVATE",
            "line": " assets/www/cordova-2.3.0.js:3549"
        },
        {
            "message": "Missing item type\nThis class contains information about any Media errors.",
            "line": " assets/www/cordova-2.3.0.js:3596"
        },
        {
            "message": "Missing item type\nRepresents a single file.\n\nname {DOMString} name of the file, without path information\nfullPath {DOMString} the full path of the file, including the name\ntype {DOMString} mime type\nlastModifiedDate {Date} last modified date\nsize {Number} size of the file in bytes",
            "line": " assets/www/cordova-2.3.0.js:3640"
        },
        {
            "message": "Missing item type\nRequest capture format data for a specific file and type",
            "line": " assets/www/cordova-2.3.0.js:3655"
        },
        {
            "message": "Missing item type\nMediaFileData encapsulates format information of a media file.",
            "line": " assets/www/cordova-2.3.0.js:3676"
        },
        {
            "message": "Missing item type\nInformation about the state of the file or directory\n\n{Date} modificationTime (readonly)",
            "line": " assets/www/cordova-2.3.0.js:3700"
        },
        {
            "message": "Missing item type\nPosition error object",
            "line": " assets/www/cordova-2.3.0.js:3734"
        },
        {
            "message": "Missing item type\nThis class provides access to device accelerometer data.",
            "line": " assets/www/cordova-2.3.0.js:3809"
        },
        {
            "message": "Missing item type\nAsynchronously acquires the current acceleration.",
            "line": " assets/www/cordova-2.3.0.js:3870"
        },
        {
            "message": "Missing item type\nAsynchronously acquires the acceleration repeatedly at a given interval.",
            "line": " assets/www/cordova-2.3.0.js:3898"
        },
        {
            "message": "Missing item type\nClears the specified accelerometer watch.",
            "line": " assets/www/cordova-2.3.0.js:3942"
        },
        {
            "message": "Missing item type\nClear the resource cache.",
            "line": " assets/www/cordova-2.3.0.js:3967"
        },
        {
            "message": "Missing item type\nLoad the url into the webview or into new browser instance.",
            "line": " assets/www/cordova-2.3.0.js:3974"
        },
        {
            "message": "Missing item type\nCancel loadUrl that is waiting to be loaded.",
            "line": " assets/www/cordova-2.3.0.js:3992"
        },
        {
            "message": "Missing item type\nClear web history in this web view.\nInstead of BACK button loading the previous web page, it will exit the app.",
            "line": " assets/www/cordova-2.3.0.js:3999"
        },
        {
            "message": "Missing item type\nGo to previous page displayed.\nThis is the same as pressing the backbutton on Android device.",
            "line": " assets/www/cordova-2.3.0.js:4007"
        },
        {
            "message": "Missing item type\nOverride the default behavior of the Android back button.\nIf overridden, when the back button is pressed, the \"backKeyDown\" JavaScript event will be fired.\n\nNote: The user should not have to call this method.  Instead, when the user\n      registers for the \"backbutton\" event, this is automatically done.",
            "line": " assets/www/cordova-2.3.0.js:4015"
        },
        {
            "message": "Missing item type\nExit and terminate the application.",
            "line": " assets/www/cordova-2.3.0.js:4028"
        },
        {
            "message": "Missing item type\nProvides Android enhanced notification API.",
            "line": " assets/www/cordova-2.3.0.js:4107"
        },
        {
            "message": "Missing item type\nClose an activity dialog",
            "line": " assets/www/cordova-2.3.0.js:4122"
        },
        {
            "message": "Missing item type\nDisplay a progress dialog with progress bar that goes from 0 to 100.",
            "line": " assets/www/cordova-2.3.0.js:4129"
        },
        {
            "message": "Missing item type\nClose the progress dialog.",
            "line": " assets/www/cordova-2.3.0.js:4141"
        },
        {
            "message": "Missing item type\nSet the progress dialog value.",
            "line": " assets/www/cordova-2.3.0.js:4148"
        },
        {
            "message": "Missing item type\nSQL result set object\nPRIVATE METHOD",
            "line": " assets/www/cordova-2.3.0.js:4187"
        },
        {
            "message": "Missing item type\nGet item from SQL result set",
            "line": " assets/www/cordova-2.3.0.js:4197"
        },
        {
            "message": "Missing item type\nSQL result set that is returned to user.\nPRIVATE METHOD",
            "line": " assets/www/cordova-2.3.0.js:4207"
        },
        {
            "message": "Missing item type\nCallback from native code when query is complete.\nPRIVATE METHOD",
            "line": " assets/www/cordova-2.3.0.js:4216"
        },
        {
            "message": "Missing item type\nCallback from native code when query fails\nPRIVATE METHOD",
            "line": " assets/www/cordova-2.3.0.js:4256"
        },
        {
            "message": "Missing item type\nSQL query object\nPRIVATE METHOD",
            "line": " assets/www/cordova-2.3.0.js:4295"
        },
        {
            "message": "Missing item type\nTransaction object\nPRIVATE METHOD",
            "line": " assets/www/cordova-2.3.0.js:4325"
        },
        {
            "message": "Missing item type\nMark query in transaction as complete.\nIf all queries are complete, call the user's transaction success callback.",
            "line": " assets/www/cordova-2.3.0.js:4343"
        },
        {
            "message": "Missing item type\nMark query in transaction as failed.",
            "line": " assets/www/cordova-2.3.0.js:4371"
        },
        {
            "message": "Missing item type\nExecute SQL statement",
            "line": " assets/www/cordova-2.3.0.js:4394"
        },
        {
            "message": "Missing item type\nStart a transaction.\nDoes not support rollback in event of failure.",
            "line": " assets/www/cordova-2.3.0.js:4424"
        },
        {
            "message": "Missing item type\nOpen database",
            "line": " assets/www/cordova-2.3.0.js:4450"
        },
        {
            "message": "Missing item type\nFor browsers with no localStorage we emulate it with SQLite. Follows the w3c api.\nTODO: Do similar for sessionStorage.",
            "line": " assets/www/cordova-2.3.0.js:4465"
        },
        {
            "message": "Missing item type\nThis class contains information about the current battery status.",
            "line": " assets/www/cordova-2.3.0.js:4564"
        },
        {
            "message": "Missing item type\nEvent handlers for when callbacks get registered for the battery.\nKeep track of how many handlers we have so we can start and stop the native battery listener\nappropriately (and hopefully save on battery life!).",
            "line": " assets/www/cordova-2.3.0.js:4590"
        },
        {
            "message": "Missing item type\nCallback for battery status",
            "line": " assets/www/cordova-2.3.0.js:4604"
        },
        {
            "message": "Missing item type\nError callback for battery start",
            "line": " assets/www/cordova-2.3.0.js:4632"
        },
        {
            "message": "Missing item type\nLaunches a capture of different types.",
            "line": " assets/www/cordova-2.3.0.js:4651"
        },
        {
            "message": "Missing item type\nThe Capture interface exposes an interface to the camera and microphone of the hosting device.",
            "line": " assets/www/cordova-2.3.0.js:4676"
        },
        {
            "message": "Missing item type\nLaunch audio recorder application for recording audio clip(s).",
            "line": " assets/www/cordova-2.3.0.js:4685"
        },
        {
            "message": "Missing item type\nLaunch camera application for taking image(s).",
            "line": " assets/www/cordova-2.3.0.js:4696"
        },
        {
            "message": "Missing item type\nLaunch device camera application for recording video(s).",
            "line": " assets/www/cordova-2.3.0.js:4707"
        },
        {
            "message": "Missing item type\nAsynchronously acquires the current heading.",
            "line": " assets/www/cordova-2.3.0.js:4733"
        },
        {
            "message": "Missing item type\nAsynchronously acquires the heading repeatedly at a given interval.",
            "line": " assets/www/cordova-2.3.0.js:4757"
        },
        {
            "message": "Missing item type\nClears the specified heading watch.",
            "line": " assets/www/cordova-2.3.0.js:4788"
        },
        {
            "message": "Missing item type\nRepresents a group of Contacts.",
            "line": " assets/www/cordova-2.3.0.js:4991"
        },
        {
            "message": "Missing item type\nReturns an array of Contacts matching the search criteria.",
            "line": " assets/www/cordova-2.3.0.js:4996"
        },
        {
            "message": "Missing item type\nThis function creates a new contact, but it does not persist the contact\nto device storage. To persist the contact to device storage, invoke\ncontact.save().",
            "line": " assets/www/cordova-2.3.0.js:5020"
        },
        {
            "message": "Missing item type\nThis represents the mobile device, and provides properties for inspecting the model, version, UUID of the\nphone, etc.",
            "line": " assets/www/cordova-2.3.0.js:5054"
        },
        {
            "message": "Missing item type\nGet device info",
            "line": " assets/www/cordova-2.3.0.js:5087"
        },
        {
            "message": "Missing item type\nSends the given message through exec() to the Echo plugin, which sends it back to the successCallback.",
            "line": " assets/www/cordova-2.3.0.js:5107"
        },
        {
            "message": "Missing item type\nAsynchronously acquires the current position.",
            "line": " assets/www/cordova-2.3.0.js:5175"
        },
        {
            "message": "Missing item type\nAsynchronously watches the geolocation for changes to geolocation.  When a change occurs,\nthe successCallback is called with the new location.",
            "line": " assets/www/cordova-2.3.0.js:5249"
        },
        {
            "message": "Missing item type\nClears the specified heading watch.",
            "line": " assets/www/cordova-2.3.0.js:5300"
        },
        {
            "message": "Missing item type\nReturns the string identifier for the client's current language.\nIt returns the language identifier string to the successCB callback with a\nproperties object as a parameter. If there is an error getting the language,\nthen the errorCB callback is invoked.",
            "line": " assets/www/cordova-2.3.0.js:5327"
        },
        {
            "message": "Missing item type\nReturns the string identifier for the client's current locale setting.\nIt returns the locale identifier string to the successCB callback with a\nproperties object as a parameter. If there is an error getting the locale,\nthen the errorCB callback is invoked.",
            "line": " assets/www/cordova-2.3.0.js:5349"
        },
        {
            "message": "Missing item type\nReturns a date formatted as a string according to the client's user preferences and\ncalendar using the time zone of the client. It returns the formatted date string to the\nsuccessCB callback with a properties object as a parameter. If there is an error\nformatting the date, then the errorCB callback is invoked.\n\nThe defaults are: formatLenght=\"short\" and selector=\"date and time\"",
            "line": " assets/www/cordova-2.3.0.js:5372"
        },
        {
            "message": "Missing item type\nParses a date formatted as a string according to the client's user\npreferences and calendar using the time zone of the client and returns\nthe corresponding date object. It returns the date to the successCB\ncallback with a properties object as a parameter. If there is an error\nparsing the date string, then the errorCB callback is invoked.\n\nThe defaults are: formatLength=\"short\" and selector=\"date and time\"",
            "line": " assets/www/cordova-2.3.0.js:5404"
        },
        {
            "message": "Missing item type\nReturns a pattern string for formatting and parsing dates according to the client's\nuser preferences. It returns the pattern to the successCB callback with a\nproperties object as a parameter. If there is an error obtaining the pattern,\nthen the errorCB callback is invoked.\n\nThe defaults are: formatLength=\"short\" and selector=\"date and time\"",
            "line": " assets/www/cordova-2.3.0.js:5445"
        },
        {
            "message": "Missing item type\nReturns an array of either the names of the months or days of the week\naccording to the client's user preferences and calendar. It returns the array of names to the\nsuccessCB callback with a properties object as a parameter. If there is an error obtaining the\nnames, then the errorCB callback is invoked.\n\nThe defaults are: type=\"wide\" and item=\"months\"",
            "line": " assets/www/cordova-2.3.0.js:5483"
        },
        {
            "message": "Missing item type\nReturns whether daylight savings time is in effect for a given date using the client's\ntime zone and calendar. It returns whether or not daylight savings time is in effect\nto the successCB callback with a properties object as a parameter. If there is an error\nreading the date, then the errorCB callback is invoked.",
            "line": " assets/www/cordova-2.3.0.js:5513"
        },
        {
            "message": "Missing item type\nReturns the first day of the week according to the client's user preferences and calendar.\nThe days of the week are numbered starting from 1 where 1 is considered to be Sunday.\nIt returns the day to the successCB callback with a properties object as a parameter.\nIf there is an error obtaining the pattern, then the errorCB callback is invoked.",
            "line": " assets/www/cordova-2.3.0.js:5539"
        },
        {
            "message": "Missing item type\nReturns a number formatted as a string according to the client's user preferences.\nIt returns the formatted number string to the successCB callback with a properties object as a\nparameter. If there is an error formatting the number, then the errorCB callback is invoked.\n\nThe defaults are: type=\"decimal\"",
            "line": " assets/www/cordova-2.3.0.js:5563"
        },
        {
            "message": "Missing item type\nParses a number formatted as a string according to the client's user preferences and\nreturns the corresponding number. It returns the number to the successCB callback with a\nproperties object as a parameter. If there is an error parsing the number string, then\nthe errorCB callback is invoked.\n\nThe defaults are: type=\"decimal\"",
            "line": " assets/www/cordova-2.3.0.js:5591"
        },
        {
            "message": "Missing item type\nReturns a pattern string for formatting and parsing numbers according to the client's user\npreferences. It returns the pattern to the successCB callback with a properties object as a\nparameter. If there is an error obtaining the pattern, then the errorCB callback is invoked.\n\nThe defaults are: type=\"decimal\"",
            "line": " assets/www/cordova-2.3.0.js:5619"
        },
        {
            "message": "Missing item type\nReturns a pattern string for formatting and parsing currency values according to the client's\nuser preferences and ISO 4217 currency code. It returns the pattern to the successCB callback with a\nproperties object as a parameter. If there is an error obtaining the pattern, then the errorCB\ncallback is invoked.",
            "line": " assets/www/cordova-2.3.0.js:5656"
        },
        {
            "message": "Missing item type\nLogging levels",
            "line": " assets/www/cordova-2.3.0.js:5728"
        },
        {
            "message": "Missing item type\nGetter/Setter for the logging level\n\nReturns the current logging level.\n\nWhen a value is passed, sets the logging level to that value.\nThe values should be one of the following constants:\n   logger.LOG\n   logger.ERROR\n   logger.WARN\n   logger.INFO\n   logger.DEBUG\n\nThe value used determines which messages get printed.  The logging\nvalues above are in order, and only messages logged at the logging\nlevel or above will actually be displayed to the user.  E.g., the\ndefault level is WARN, so only messages logged with LOG, ERROR, or\nWARN will be displayed; INFO and DEBUG messages will be ignored.",
            "line": " assets/www/cordova-2.3.0.js:5754"
        },
        {
            "message": "Missing item type\nGetter/Setter for the useConsole functionality\n\nWhen useConsole is true, the logger will log via the\nbrowser 'console' object.  Otherwise, it will use the\nnative Logger plugin.",
            "line": " assets/www/cordova-2.3.0.js:5784"
        },
        {
            "message": "Missing item type\nLogs a message at the LOG level.\n\nParameters passed after message are used applied to\nthe message with utils.format()",
            "line": " assets/www/cordova-2.3.0.js:5813"
        },
        {
            "message": "Missing item type\nLogs a message at the ERROR level.\n\nParameters passed after message are used applied to\nthe message with utils.format()",
            "line": " assets/www/cordova-2.3.0.js:5821"
        },
        {
            "message": "Missing item type\nLogs a message at the WARN level.\n\nParameters passed after message are used applied to\nthe message with utils.format()",
            "line": " assets/www/cordova-2.3.0.js:5829"
        },
        {
            "message": "Missing item type\nLogs a message at the INFO level.\n\nParameters passed after message are used applied to\nthe message with utils.format()",
            "line": " assets/www/cordova-2.3.0.js:5837"
        },
        {
            "message": "Missing item type\nLogs a message at the DEBUG level.\n\nParameters passed after message are used applied to\nthe message with utils.format()",
            "line": " assets/www/cordova-2.3.0.js:5845"
        },
        {
            "message": "Missing item type\nLogs a message at the specified level.\n\nParameters passed after message are used applied to\nthe message with utils.format()",
            "line": " assets/www/cordova-2.3.0.js:5859"
        },
        {
            "message": "Missing item type\nGet connection info",
            "line": " assets/www/cordova-2.3.0.js:5943"
        },
        {
            "message": "Missing item type\nProvides access to notifications on the device.",
            "line": " assets/www/cordova-2.3.0.js:5999"
        },
        {
            "message": "Missing item type\nOpen a native alert dialog, with a customizable title and button text.",
            "line": " assets/www/cordova-2.3.0.js:6005"
        },
        {
            "message": "Missing item type\nOpen a native confirm dialog, with a customizable title and button text.\nThe result that the user selects is returned to the result callback.",
            "line": " assets/www/cordova-2.3.0.js:6019"
        },
        {
            "message": "Missing item type\nCauses the device to vibrate.",
            "line": " assets/www/cordova-2.3.0.js:6034"
        },
        {
            "message": "Missing item type\nCauses the device to beep.\nOn Android, the default notification ringtone is played \"count\" times.",
            "line": " assets/www/cordova-2.3.0.js:6043"
        },
        {
            "message": "Missing item type\nRequest a file system in which to store application data.",
            "line": " assets/www/cordova-2.3.0.js:6064"
        },
        {
            "message": "Missing item type\nLook up file system Entry referred to by local URI.",
            "line": " assets/www/cordova-2.3.0.js:6111"
        },
        {
            "message": "Missing item type\nDefines a property getter for obj[key].",
            "line": " assets/www/cordova-2.3.0.js:6174"
        },
        {
            "message": "Missing item type\nReturns whether the item was found in the array.",
            "line": " assets/www/cordova-2.3.0.js:6198"
        },
        {
            "message": "Missing item type\nReturns an indication of whether the argument is an array or not",
            "line": " assets/www/cordova-2.3.0.js:6209"
        },
        {
            "message": "Missing item type\nReturns an indication of whether the argument is a Date or not",
            "line": " assets/www/cordova-2.3.0.js:6216"
        },
        {
            "message": "Missing item type\nDoes a deep clone of the object.",
            "line": " assets/www/cordova-2.3.0.js:6223"
        },
        {
            "message": "Missing item type\nReturns a wrapped version of the function",
            "line": " assets/www/cordova-2.3.0.js:6250"
        },
        {
            "message": "Missing item type\nCreate a UUID",
            "line": " assets/www/cordova-2.3.0.js:6265"
        },
        {
            "message": "Missing item type\nExtends a child object from a parent object using classical inheritance\npattern.",
            "line": " assets/www/cordova-2.3.0.js:6276"
        },
        {
            "message": "Missing item type\nAlerts a message in any available way: alert or console.log.",
            "line": " assets/www/cordova-2.3.0.js:6292"
        },
        {
            "message": "Missing item type\nFormats a string and arguments following it ala sprintf()\n\nsee utils.vformat() for more information",
            "line": " assets/www/cordova-2.3.0.js:6303"
        },
        {
            "message": "Missing item type\nFormats a string and arguments following it ala vsprintf()\n\nformat chars:\n  %j - format arg as JSON\n  %o - format arg as JSON\n  %c - format arg as ''\n  %% - replace with '%'\nany other char following % will format it's\narg via toString().\n\nfor rationale, see FireBug's Console API:\n   http://getfirebug.com/wiki/index.php/Console_API",
            "line": " assets/www/cordova-2.3.0.js:6313"
        },
        {
            "message": "Missing item type\nCreate all cordova objects once page has fully loaded and native side is ready.",
            "line": " assets/www/cordova-2.3.0.js:6413"
        }
    ]
}